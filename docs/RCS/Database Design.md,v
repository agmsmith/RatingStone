head	1.58;
access;
symbols;
locks; strict;
comment	@# @;


1.58
date	2021.07.15.01.32.12;	author agmsmith;	state Exp;
branches;
next	1.57;

1.57
date	2021.07.13.23.59.23;	author agmsmith;	state Exp;
branches;
next	1.56;

1.56
date	2021.01.16.17.25.05;	author agmsmith;	state Exp;
branches;
next	1.55;

1.55
date	2021.01.10.22.42.02;	author agmsmith;	state Exp;
branches;
next	1.54;

1.54
date	2021.01.10.20.33.51;	author agmsmith;	state Exp;
branches;
next	1.53;

1.53
date	2021.01.08.23.00.03;	author agmsmith;	state Exp;
branches;
next	1.52;

1.52
date	2021.01.08.18.41.24;	author agmsmith;	state Exp;
branches;
next	1.51;

1.51
date	2021.01.04.17.22.42;	author agmsmith;	state Exp;
branches;
next	1.50;

1.50
date	2020.09.20.23.45.52;	author agmsmith;	state Exp;
branches;
next	1.49;

1.49
date	2020.09.13.20.48.36;	author agmsmith;	state Exp;
branches;
next	1.48;

1.48
date	2020.09.11.01.26.12;	author agmsmith;	state Exp;
branches;
next	1.47;

1.47
date	2020.09.10.21.58.31;	author agmsmith;	state Exp;
branches;
next	1.46;

1.46
date	2020.09.10.21.57.02;	author agmsmith;	state Exp;
branches;
next	1.45;

1.45
date	2020.08.06.22.53.07;	author agmsmith;	state Exp;
branches;
next	1.44;

1.44
date	2020.08.05.20.42.14;	author agmsmith;	state Exp;
branches;
next	1.43;

1.43
date	2020.08.04.21.18.02;	author agmsmith;	state Exp;
branches;
next	1.42;

1.42
date	2020.08.02.20.46.02;	author agmsmith;	state Exp;
branches;
next	1.41;

1.41
date	2020.07.15.20.46.09;	author agmsmith;	state Exp;
branches;
next	1.40;

1.40
date	2020.07.15.01.21.50;	author agmsmith;	state Exp;
branches;
next	1.39;

1.39
date	2020.07.14.00.22.05;	author agmsmith;	state Exp;
branches;
next	1.38;

1.38
date	2020.07.14.00.17.38;	author agmsmith;	state Exp;
branches;
next	1.37;

1.37
date	2020.07.12.01.00.19;	author agmsmith;	state Exp;
branches;
next	1.36;

1.36
date	2020.07.10.19.35.35;	author agmsmith;	state Exp;
branches;
next	1.35;

1.35
date	2020.07.07.21.35.52;	author agmsmith;	state Exp;
branches;
next	1.34;

1.34
date	2020.07.07.20.51.57;	author agmsmith;	state Exp;
branches;
next	1.33;

1.33
date	2020.07.04.16.58.42;	author agmsmith;	state Exp;
branches;
next	1.32;

1.32
date	2020.06.30.20.51.44;	author agmsmith;	state Exp;
branches;
next	1.31;

1.31
date	2020.06.30.00.24.46;	author agmsmith;	state Exp;
branches;
next	1.30;

1.30
date	2020.06.29.20.27.42;	author agmsmith;	state Exp;
branches;
next	1.29;

1.29
date	2020.06.29.15.43.14;	author agmsmith;	state Exp;
branches;
next	1.28;

1.28
date	2020.06.29.01.01.00;	author agmsmith;	state Exp;
branches;
next	1.27;

1.27
date	2020.06.27.21.30.08;	author agmsmith;	state Exp;
branches;
next	1.26;

1.26
date	2020.06.26.00.37.21;	author agmsmith;	state Exp;
branches;
next	1.25;

1.25
date	2020.06.25.00.06.50;	author agmsmith;	state Exp;
branches;
next	1.24;

1.24
date	2020.06.24.11.18.49;	author agmsmith;	state Exp;
branches;
next	1.23;

1.23
date	2020.06.21.00.20.58;	author agmsmith;	state Exp;
branches;
next	1.22;

1.22
date	2020.06.20.17.14.23;	author agmsmith;	state Exp;
branches;
next	1.21;

1.21
date	2020.06.15.15.56.25;	author agmsmith;	state Exp;
branches;
next	1.20;

1.20
date	2020.04.10.15.58.33;	author agmsmith;	state Exp;
branches;
next	1.19;

1.19
date	2020.04.10.15.40.04;	author agmsmith;	state Exp;
branches;
next	1.18;

1.18
date	2020.04.10.15.37.19;	author agmsmith;	state Exp;
branches;
next	1.17;

1.17
date	2020.03.28.16.19.43;	author agmsmith;	state Exp;
branches;
next	1.16;

1.16
date	2020.03.28.13.18.21;	author agmsmith;	state Exp;
branches;
next	1.15;

1.15
date	2020.03.27.19.03.58;	author agmsmith;	state Exp;
branches;
next	1.14;

1.14
date	2020.03.26.20.25.45;	author agmsmith;	state Exp;
branches;
next	1.13;

1.13
date	2020.02.20.21.45.08;	author agmsmith;	state Exp;
branches;
next	1.12;

1.12
date	2020.02.07.15.28.32;	author agmsmith;	state Exp;
branches;
next	1.11;

1.11
date	2020.02.04.22.20.21;	author agmsmith;	state Exp;
branches;
next	1.10;

1.10
date	2020.02.03.22.33.40;	author agmsmith;	state Exp;
branches;
next	1.9;

1.9
date	2020.02.03.22.26.20;	author agmsmith;	state Exp;
branches;
next	1.8;

1.8
date	2020.02.02.22.15.24;	author agmsmith;	state Exp;
branches;
next	1.7;

1.7
date	2020.02.02.21.44.52;	author agmsmith;	state Exp;
branches;
next	1.6;

1.6
date	2020.01.31.21.54.25;	author agmsmith;	state Exp;
branches;
next	1.5;

1.5
date	2020.01.30.22.16.28;	author agmsmith;	state Exp;
branches;
next	1.4;

1.4
date	2020.01.30.15.45.39;	author agmsmith;	state Exp;
branches;
next	1.3;

1.3
date	2020.01.30.14.40.09;	author agmsmith;	state Exp;
branches;
next	1.2;

1.2
date	2020.01.29.22.52.13;	author agmsmith;	state Exp;
branches;
next	1.1;

1.1
date	2020.01.29.22.43.07;	author agmsmith;	state Exp;
branches;
next	;


desc
@Documenting the Rating Stone database design, and related classes.
@


1.58
log
@After another proofreading run.
@
text
@# The Rating Stone Reputation System Database

<SMALL>$Id: Database\040Design.md,v 1.57 2021/07/13 23:59:23 agmsmith Exp agmsmith $</SMALL>

1. Table of Contents
{:toc}

## Basic Ideas

Because I'm thinking of on implementing the reputation system as a BlockChain
ledger application, or as a federated collection of systems exchanging records,
the database is set up as a write once collection of object records and link
records.  Objects are the things the user can view and which have ratings
(posted messages, lists of things, other users).  Links implement lists of
things, connecting a pair of objects together, one being a parent or container
object (such as a list of book reviews) and the other being a child object in
that container (such as a book review object).  Usually rating points are also
transfered when you create a link (perhaps describing how much you like that
book review).  I'm using separate link records rather than parent references
internal to the objects so that an object can have multiple parents (useful for
filing something under multiple categories).

### Changing Things by Making New Objects

For example, if you want to edit some posted text, the system will create a
newer object (they all have datestamps) with the new text and a reference back
to the original text object record.  Then when someone wants to see the
original text, it will search for newer versions and display that text instead.
But new references (links) to the text (such as replies) will still reference
the original text record, since that has a more constant identity then possibly
yet more new text records.  Advanced users can view a list of all those text
records and see how the text changed over time.

Similarly when someone adds an item to a list, a link record will be added to
connect the list and the item.  To remove an item, the link record isn't
modified, instead a new deletion record is created, marking the original link
record as deleted.

Theoretically, when displaying the current state of things, you run through all
the records in chronological order, adding and removing objects and links from
the current state.  In practice, we cache things.  So an object record would
have a flag that marks it as deleted or amended, and a link record would
similarly be marked, and there can be cached forward references to more quickly
point out the record with the latest information.

### Single Table Inheritance

Because I don't want to have zillions of tables in the database, and want to
inherit functionality for various related record types (generic object > text
object > book review object), we're using the Ruby on Rails ActiveRecord
"[single table inheritance](https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html)"
setup.  There will be one actual database table for objects and another one for
links between objects, both have the Rails magic "type" field in each row to
specify the particular subclass used for that row.

#### Reusing Generic Fields to Avoid Space Explosion

To avoid the common complaint about single table inheritance adding too many
fields for subclasses, we put some generic number and string fields into the
base class and reuse them differently for each subclass.  Subclasses give those
generic fields subclass-specific names by using the magic "alias_attribute"
ActiveRecord method.  So where the base may have a generic string1 and string2
field, a User subclass could rename those as FullName and EMailAddress, with
"alias_attribute :full_name, :string1" and "alias_attribute :email_address,
:string2".  ActiveRecord will then automatically build queries using the actual
database field (string1, string2) names whenever we use the subclass object.

### Direct References, Link Records, or Full Blown Lists

There's a design choice needed for making lists of things.  Should you make
link records between a main object and sub-objects that apply to it, or should
you have a second object as kind of a list header, and link the sub-objects to
it?  For example, a Friends list.  You could link friends (LedgerUser records)
to the main user (another LedgerUser record) with specialised LinkFriend
records.  Or you could make a LedgerListFriends object with a link to the main
user, then attach the friends to that with generic link records.

#### Design Choice - Faster

Direct links are faster for the database, but need a lot of custom link record
subclasses, but those are fairly cheap.  The list header method just needs to
give the list header a name and uses generic records, but requires more
database operations.  There's also a third option of putting the link reference
in the record as an id field, like friend_id, but that only works if you have
one friend (useful in other cases, like having only one creator).  We'll go
with the faster but more work custom link subclasses method, except for user
defined lists which will use the list header with a name technique, and plain
references where that makes sense.  If the number of subclasses gets too big,
this decision will have to be reconsidered.

### Retrospect

In retrospect it may be simpler to combine objects and links into a class
structure based on a single multipurpose object.  Currently we have records for
linking things together (such as linking a user and a thing together with a
rating to say that that user has an opinion about that thing) and object
records representing things (posts, pictures, etc).  The links transfer
reputation points.  The objects contain reputation points.  A multipurpose
object design would make it simpler to have an opinion about an opinion, which
is needed for meta-moderation.  And we need meta-moderation to keep the quality
of opinions up.  Though having simpler link records makes the database smaller
and faster.

## About Posts and Groups

When someone writes a post, they create both a LedgerPost object with the text
and a link object (LinkGroupContent) to connect it to the group it is in.  If
they want it to be in multiple groups, they can just add more links.  If it's a
reply to some other post, they add a link (LinkReply) to that post too.  It's a
bit awkward and expensive in ratings points (each link needs points) having
both a link to the reply and a link to the group, but both are needed.  We
can't default to the group based on the group the previous message is in, since
later on someone could add that previous post to some other group and your post
would suddenly be visible to people you hadn't expected.  Also this discourages
the evil of unnecessary cross-posting.

The links also award points to both the post and the group (the user decides
how much to spend and how to split it), so that posts using the group
contribute a bit to its upkeep.  The group owners can spend the group points on
the group's behalf, perhaps reimbursing moderators for the points they use
while doing their work (creating approval and deletion objects takes points).
Of course, if the group's points fall to zero, it can be garbage collected.
Same for posts that aren't referenced much over time.

I'd like to have small points awarded for just reading a post, but that won't
be practical since it would blow up the database size tremendously (each read
would create a LinkBase record).  Or maybe we could have a daily "tip" or
donation operation that awards points to the list of posts the user read that
day, and a variation of LinkBase that uses AuxLedger records to specify a bunch
of posts to get a reward.  Though that would make the backtracking from the
post to donors awkward (not just looking for a connected LinkBase object) when
doing awards ceremonies.  So for now, you can "like" or maybe "cast a stone"
for individual posts and award points manually.

So, what happens if you make a post that isn't in a group?  People can still
find it by looking at the creator's profile for all the posts they have
written.  There are no groups to allow people to read it, so it has a default
permission role of Banned for everyone except the creator or owners (if the
user attaches extra owners to the post).  An alternative for ungrouped posts is
to make them readable by everybody, including anonymous Internet users so
search engines will pick them up.  Which to choose?  A default of Banned would
force users to spend extra points to make their post readable in some group.  A
default of overly public would encourage more public discussion.  I'm going to
make them public, since we still require spending typically 1.0 reputation
points to create an ungrouped reply.  It costs twice as much (or you could make
do with a shorter message life) to make it a reply in a private discussion,
since you have the group link(s) to add as well as the reply link.  People will
still use groups since it's worthwhile to reach a more relevant audience.


## Relationships

We want to identify people based on relationships.  The obvious one used by
many social media is Friend.  Another is Follower.  We can also do Parent,
Child, Spouse and that should about cover it for family relationships
(grandparents are Parent of Parent of person, siblings share a parent, etc).
We might want to add variations of friendship like boyfriend/girlfriend, work
related acquaintance, divorced and so on but preferably without the extra
complication of gender.  Possibly besides birthday records, we'll need death
date records so a spouse is a widower when the other spouse is dead, but they
go back to being married when they are both dead (they're always married, but
we're showing what is important to their audience).

After discarding some earlier ideas on relationship implementation, it seems
there are a two orthogonal properties of relationships we have to worry about
for searching and security purposes: Symmetry and approval.  All relationships
will be represented in our database by a LinkBase subclass record listing two
people (parent and child fields, though that usually isn't the actual meaning)
and how they're connected.

### Symmetry Dimension

Bidirectional or equal or symmetric relationships are like Friend where both
ends of the relationship are an indistinguishable "Friend".  Same for Spouse.
But Parent/Child is a pair that has distinctly different ends.  So is
Follower/Leader, or Employer/Employee.  Those we'll call asymmetric.

The main complication is that we have to search differently depending on the
symmetry.  If we're looking for friends of person X, we have to search for all
Friend records that have X in the parent_id as well as all Friend records that
have X as the child_id.  If we're looking for all parents of X, we have to
search the Parent/Child records which have X as the child.  If we're looking
for all children of X, we have to search the same kind of parent/child records,
but look for ones where the parent field is X.

So, the search technique changes and we need to know that Parent/Child searches
look for the same type of record but search different fields.

### Approval Dimension

The other dimension is approval.  Sometimes we need approval from both parties
to create the link; each approves their end using a LedgerChangeMarkings
record.  Other times we have a one way relationship, such as a fan of a movie
star, and only the fan end needs approval (and that's usually automatic because
they created the link).

One side effect of approval is that the reputation points assigned to the link
only get counted when the link is fully approved.  That gives incentive to do
approvals, and opens the door to third party suggested relationships (be a fan
of this brand and you get some points).  Of course, instead of approving, you
can delete the link, and the points spent on making the link are wasted.

Partially approved relationships are still useful.  If only one end is
approved, then for example instead of Friends we have admirer (the approved
end) and admiree (the unapproved one).  Or if both ends haven't been approved,
we have a suggested friendship (maybe a third party created the relationship
record).  One-way relationships still need approval of the originating end, the
fan implicitly approves the relationship record when they create it for
themselves.  If someone else created it, then it still needs the originating
end approved by the fan.  The movie star end is automatically approved.
Otherwise fans and haters would have their one way relationship rebuffed; a
particular problem for awarding down points.  No, the movie star or villain
can't delete one way relationships; like fleas they stick around for a while
and annoy.


## Permissions Role Model

The main worry is about posts.  The system needs to decide who can read a post,
who is allowed to reply, who can add a post to a private discussion group, who
can delete it and so on.  We'll worry about other permissions later.  After
considering access control lists and even [UNIX style
permissions](https://en.wikipedia.org/wiki/File_system_permissions#Traditional_Unix_permissions)
I decided that every post should be in a group or several groups.  The group
decides many of those things mainly by having a membership list.  Even a
person's blog would be a group.  Perhaps private direct communictions could be
a group too, with just the two people in the conversation being group members.

The next big insight was to use permission roles.  They can be put in a rough
order where one more permissive role includes the things allowed in the lower
less permissive roles, to save on having to grant each permission individually.
In practice, each role is granted by linking the user to a group with a record
that specifies the highest role they have in that group.

1. **Banned**.  Can't access the group or posts.
2. **Reader**.  Can read posts and see the group description.
3. **Member**.  Can see more group information, like membership lists.  Some
   groups also automatically approve posts by members, effectively giving the
   member write priviledges.  Others require approval by a moderator.  By the
   way, there's no permission needed to request that a post be added to a
   group, so even a non-member could submit a post.
4. **Opinionator**.  Can make opinions about things, and associate them with
   the group.
5. **Message Moderator**.  Can approve, unapprove (makes it pending approval
   again) and disconnect posts and opinions from the group.  Can see deleted
   messages and opinions.
6. **Meta Moderator**.  Can make anonymous comments on opinions about messages
   in the group.  There might be bonus points for accurate opinions and bans
   for creators of bad ones.
7. **Member Moderator**.  Approves and rejects membership requests.
8. **Owner**.  Owners can be added to a group (and other objects) by a
   LinkOwner record.  They have all permissions (including approving or
   deleting owners and moderators), except they can't change the creator.
9. **Creator**.  Has all permissions to modify the object, including changing
   the creator.

We'll use ten times the list row numbers here as the role priority, in case we
later want to add new roles in-between.

When finding out if a user has a permission for an action allowed by a certain
role, check for a match with the creator first (everything is allowed).  Then
see if they are in the Banned role second: permission is denied (if you want to
explicitly deny a user access to the group, give them the Banned role).  Then
start searching at the most permissive role after Creator and work down to the
lowest level that matches the role query.  If they were not found in the search
then they don't have permission for the role.  In practice, we'll first look
for some LinkBase subclass record that specifies roles and sort by role
priority.  Then try the more computationally expensive wildcards for each role.

The group would have a few settings related to those roles (stored in a
separate database table rather than directly in the LedgerFullGroup record):

* Posts by non-members automatically approved?  Could lead to rowdy
  discussions, though the requirement to spend points to talk hopefully will
  make people think before posting.
* Posts by members automatically approved?  Avoids most of the need for message
  moderators (might still need moderators to delete posts).
* Membership requests automatically approved?  Good for public bulletin boards.
* We can do interesting things with the reputation points the user gave the
  group when adding their post to the group.  Maybe require a minimum number of
  points to have the post automatically accepted.  Perhaps have a discount for
  members.  If the user didn't spend enough points on making the link to the
  group, the link stays pending, waiting for a moderator to approve it or
  delete it (wasting the user's points).
* There could be a weekly membership fee, which would go to the group.
* Reward the moderators by reimbursing their point usage from the group's
  supply of points.  Possibly give them a bit extra, which could provide
  incentive to moderate and meta-moderate.
* Beside the explicit links to the group to identify members and other kinds of
  users, also have relationship wildcards to specify users for each role.
  They're usually relative to the owners & creator of the group.  Includes
  concepts like Everybody, Friends of the owners, Friends of Friends of the
  owners, Parents of Parents, Enemies of Friends and so on.  We need a little
  language to specify users, using relationships declared elsewhere (Friend,
  Sibling, Spouse and so on links).  Could use up too much database time
  resulting in a terminated web session, so maybe warn people when they set
  wildcards that could potentially select from too many people (count up how
  many friends of enemies the owners have, before saving the new wildcard in
  case of termination).
* Generic Internet users (people not logged in) allowed as readers?  Done by
  having a special Internet user for non-logged-in people which you can assign
  to the Reader role, or to the Banned role or just leave out.
* Allow anyone to be a Reader?  If enabled, lets anyone read messages.  Also
  no need for storage for the list of Readers.  Done by adding the Everybody
  wildcard to the Reader role.

### Wildcard Language

To identify a group of people by wildcards, we can make up a little language.
We want to have expressions that say:

* Everybody.
* A particular person.
* Friends of someone.
* Members (and all the other roles, such as moderators, owners) of a group.

Perhaps a functional language like:

* "99" the LedgerUser record number for a particular person.
* "*" for everybody.
* "Friend()" for all friends of the contents.  Other relationships can be used
  as well as Friends.  Some are asymetric so we need to know paired words such
  as "Parent" and "Child" and that they refer to opposite ends of the same
  relationship record.
* "Banned", "Readers", "Members", "MessageMods", "MemberMods", "Owners",
  "Creator" specifies all the people who are explicit members (have a LinkRole
  record for the group) in that role or higher (Members includes up to
  Creator etc).
* Plus "+" to concatenate wildcards.
* Round brackets for grouping order of operations.

So you could have "Friend(Members)+Members" for friends of all members and the
members too.  An empty string would mean nobody.


## *LedgerBase* Classes

This is the base class for persistent objects that the user may interact with.
There is one database table for all objects of this class and subclasses.  The
name is short for LedgerObjectBase class.  I tried to find other words for a
short form, but there's already an "Object" class and "Thing" didn't seem
serious or distinct enough.

* id The usual big (64 bit) integer unique record sequence number, which
  identifies the record/object.  There's an index of course to make finding a
  record by id number quick.  In the future we may use a GUID instead, or a
  pair of (id,server) if there are several federated servers run by different
  organisations.  Write-once.
* type string The name of the subclass to use for this object record.  "type"
  is the magic word Rails recognises to name a class and turn on single table
  inheritance mode.  Write-once.
* original_id Points to the original version of this record, or equal to id if
  this is the original one.  When someone creates a link to the object, by
  default it's linked to by the original id.  The original record is still used
  to cache the rating points and other dynamic things, though the actual
  content (text in a Post for example) comes from the latest amended record
  (unless the user is looking for a specific version the object).  I had
  considered NULL for marking the original record, but it's easier to find all
  versions of something if the original one is marked the same way, so soon
  after creation the original_id will be updated to be equal to id (there's a
  brief time when it is NULL, could cause timing bugs).  Happens to be
  write-once.
* amended_id In the original record, this points to the latest version of this
  record or is NULL if there are no other versions.  In later versions, it is
  the ID of the previous version when this one was created, and is used for
  detecting race conditions (when saving for the first time, it's a copy of the
  original record's amended_id field, and that shouldn't have changed when it
  comes time to save the new version, unless there is a race condition bug).
  Usually we delete or undelete all versions of an object, but if we ever
  delete/undelete just some versions, this will point to the latest not deleted
  version.  Changed as needed.
* deleted boolean True if there is a LedgerChangeMarkings record that is
  currently deleting this record, otherwise false (record is alive).  A deleted
  object just shows a warning message to the user when an attempt is made to
  display it.  Rating points are accumulated as usual.  That way we can
  undelete this record if needed.  Changed as needed.
* expired boolean False.  When true (usually set by the weekly award ceremony
  prior to garbage collection at the next ceremony), the record will be deleted
  soon.  Other than displaying a warning to the user when viewing this object
  (suggesting that they spend some points to revive it), doesn't affect how the
  record is treated.  Changed as needed.
* has_owners boolean True if there is one or more LinkOwner records (even
  deleted ones) that references this record.  False if there are none, which
  means we can skip searching for LinkOwner records every time we check
  permissions, which saves a lot of database queries!
* is_latest_version boolean True if the record is the latest version of the
  object.  False otherwise.  Caches the result of looking up the original
  object and seeing which record is the latest, so we have less overhead when
  displaying only the latest versions in a list of posts.  Also lets us skip
  older versions directly in an SQL query.
* creator_id Identifies the user who created this record.  Store the id of the
  original version of the user's LedgerUser record.  The root object is
  considered to have created itself.  If you want to change the creator of an
  object, you have to make a new version of the record with the new creator.
  Conceptually there is a LinkCreator record that links the object to the
  creator, with zero reference points allocated.  To cut down on such a common
  record, it's implied by the creator_id field.  Write-once.
* current_down_points float  Changed as needed.
* current_meh_points float  Changed as needed.
* current_up_points float Number of rating points in each of the directions for
  this object.  This is the current total, including fading over time
  (recalculated at the beginning of the week in the awards ceremony) plus new
  ratings applied this week.  If the related current ceremony number doesn't
  match the latest ceremony, then they need to be recalculated before they are
  used or updated.  We keep the directions separate to improve statistical
  estimation of how accurate the rating is (just storing the net difference of
  2 points isn't as meaningful as knowing you had 102 up and 100 down vs 3 up
  and 1 down), and use them as inputs to various different sorting algorithms.
  Until someone redoes the statistical theory, we'll split meh points 50% to
  each of up and down.  But once we have better math, we can use meh directly.
  When they have all faded away to close to zero (less than 0.01, equivalent to
  3 years of fading one point) then the record can be garbage collected from
  the current database, freeing up storage.  Changed as needed.
* current_ceremony integer The number of the awards ceremony that the current
  points were calculated for.  Set to -1 if not calculated yet or needs recalc.
  When points change during the week (someone makes a rating for example), the
  current point values are updated incrementally and the ceremony number is
  left at the latest ceremony.  Changed as needed.


### *LedgerChangeMarkings* < LedgerBase

Used for marking possibly multiple objects and/or links as deleted, undeleted,
approved or rejected.  AuxLedger and AuxLink records are used to associate this
LedgerChangeMarkings with all the things (both LedgerBase object records and
LinkBase link records) being changed.  You can change the deletion state (mark
deleted, mark undeleted, no change), the child approval state (approved,
rejected, no change) and parent approval state.  Though the approval state only
is relevant for link records.  And you can't delete a LedgerChangeMarkings
record, to avoid recursive infinite loops if someone makes a circle of records.
You can have several LedgerChangeMarkings records affecting the same object;
only the undeleted ones (can be expired, doesn't matter) played back in
chronological order decide the target object's status.  So yes, if enough time
passes, the LedgerChangeMarkings will fade away and the targets will no longer
be deleted.  Though most often the targets will have faded away too by that
time.  Or we could have a policy of not garbage collecting LedgerChangeMarkings
records.

You need to be the creator or owner of the object to change the deleted state.

Both child and parent approvals are potentially changed when you make a
LedgerChangeMarkings request, determined by whether you have permission to
change those approvals (relative security role used).  To more strongly reject
permission, delete the unapproved link (if you need to be asked for approval,
you can delete it too).

* marks string Specifies which flags to turn on or off.  The letters are "D"
  for delete, "A" for approval, and preceed with a "+" to add the flag, "-" to
  remove the flag.  Don't mention the letters for flags which you don't want to
  change.  Run them together or put in spaces or commas if you wish, "-D +A"
  and "-D,+A" and "-D+A" and "+A-D" are equivalent.  But "+ A - D" won't work;
  the +/- have to be immediately before the letter.
* context string Describes the context, such as being a manual delete button
  push from a given web page, from a specified IP address.  User is implied by
  the creator of this record.  Automatically generated by the system.
* reason text Reason for deletion, approval, etc.  Text supplied by the user.


### *LedgerUser* < LedgerBase

Idenfities a particular user.  We don't have placeholder users (for celebrities
and other external people); a group should be created by fans instead.

* User_id Points to a user's record in the separate Users database (see
  RailsTutorial) which has passwords, e-mail addresses and other private
  information.
* Elsewhere, the user is referenced by the record id number of the original
  version of the LedgerUser record.  Though for export or federated systems
  we'd need a GUID or an id+server pair.
* Points awarded per week cached value from the most recent award ceremony.
  Computed by considering various achievement records (such as e-mail verified,
  passport photo uploaded, had tea with the sysop, bought some bonus points)
  attached to the LedgerUser record by links.  A user can always spend their
  weekly award even if their reputation is negative.  If it is net positive,
  they can spend their net reputation too, down to zero.  Unspent awards get
  added to their up reputation.


#### *LedgerCompany* < LedgerUser

Are corporations people?  Not really, but we have them as users too in case
someone wants to run a company web page or otherwise have a presence on this
reputation system.  As well, employees can list the LedgerCompany as their
employer.  Alternatively, they are a regular User but linked to a category
of Companies.  I prefer the latter method.


### *LedgerThing* < LedgerBase

Represents a real world thing like a book.  Users can comment about it and
award it rating points, but it never regenerates points (only Users do that).
Attach content to it (like pictures or a post) to describe it better, using
LinkHomeContent.  Links to a classification group can rate it.  For example, a
book reviews group would have a link to the book to award it points.  Can be in
multiple groups, such as "My Books" and "World's Best Books".

* Name of thing.  Write-once.


### *LedgerContent* < LedgerBase

An abstract base class for things which can be displayed to the user.  There
can also be replies to this thing, it can be put in a discussion group, added
to a category list to identify what the topic of the content is, have rating
points awarded to it, and so on.  It is also usually visible to users and even
external web sites, unless permissions (determined by the groups it is in) make
it private.

* subject string A short bit of text identifying the content, in plain UTF-8.
  For a post this will be the subject line.  For a picture, this will be a
  description of it (also used as the HTML alternative text for the picture).
  Write-once.


#### *LedgerPost* < LedgerContent

A post made by a user.  Contains some formatted text.  They can also attach
pictures and other media files with LinkMedia records.  They'll be displayed in
a grid after the text, in order by link creation date.  This is the object the
user interacts with the most.

* content text The text written by the user for the post, in markdown UTF-8
  format (we're using the kramdown dialect).  Length limited only by the number
  of points the user wants to spend (it's an unlimited Text not a String
  field).  Write-once.


#### *LedgerMedia* < LedgerContent

A file uploaded by the user.  Usually some sort of media, like a picture or
video clip.  Can be attached to multiple posts to make them more interesting,
and referenced by external web sites as well.  Byte size only limited by the
points the user wants to spend to upload it.  All kinds can display a picture,
which can be clicked on to get more detail or play it if it is a video or audio
file or download it if binary.

* Implicit ActiveStorage link stores the file.  May use CarrierWave if
  ActiveStorage URL policies are too annoying (too long, permanent links
  difficult, breaks web browser caching).  Have functions for getting the file
  size, data type, URL, etc.


### *LedgerSubgroup* < LedgerBase

A way of collecting related things together.  Useful as a subtopic of a
discussion group or a category for photographs within a classification tree.
All content that fit the subtopic (decided by users and moderators) are linked
to this object by LinkGroupContent records (even replies to posts already in
the subgroup).

LinkSubgroup records specify the hierarchy of subgroups (actually a possibly
cyclic directed graph), by linking parent group to child group.  Multiple
parents are allowed, so a photo taken in Canada in July 2020 could be filed
both in a subgroup for North America and a subgroup for Year 2020.  You could
even make subgroups for each family member and classify the photos by who is in
them.

There's an optional home post (see LinkHomeContent) that describes the group in
more detail.  The home post usually will have a list of recent additions in the
group displayed after it.

A subgroup object doesn't have members attached or do permission role check
operations; that's delegated to the LedgerFullGroup(s) which control this
subgroup by LinkGroupRoleDelegation records.  If there are none then only
creators or owners can use the subgroup.

* name string A short string used as the group's name.
* description text A paragraph of text in kramdown format describing the group.


#### *LedgerFullGroup* < LedgerSubgroup

Besides being a grouping object, this one also keeps track of LedgerUsers in
various roles (plain member, moderator and so on), linked to it by LinkRole
records.  The plain LedgerSubgroup objects controlled by this group will
delegate their permission determination to this LedgerFullGroup and its
membership lists by a LinkGroupRoleDelegation record for each subgroup.

Currently, extra settings (post moderation options, etc) are stored in a
related GroupSettings database table, though we may need to use ledger objects
if a history of changes needs to be preserved.


### *LedgerAwardCeremony* < LedgerBase

This record marks the time when (usually weekly) rating points are awarded.  We
perform the ceremony relative to planetary time, so the actual time between
ceremonies won't always be exactly 7 days and 0 seconds, due to the slowdown of
the earth's rotation and server downtime problems.  If you delete this record,
the ceremony is ignored and just about everything needs to be recalculated,
including award numbers for subsequent ceremonies and LinkBase records.
Currently deleting this kind of record is not implemented, so don't do it.

* ceremony_number A count of the number of award ceremonies done up to and
  including this one.  In other words, a sequence counter starting at 1.  So if
  rating points were assigned at the beginning of time, before any awards, the
  faded value of the points after a particular award ceremony would be original
  points * (fade ** award_number).
* completed_at Time stamp for when the award ceremony was completed.  The start
  time is in the usual created_at time stamp for this record.  The web site is
  offline (by design) while the awards are being calculated.

#### Calculating Awards

To avoid rewriting the whole database, current point levels based on fading and
awards over time for regular LedgerBase objects are calculated on demand and
cached.  If needed, we can recalculate everything for a particular object back
to the beginning of time, which is useful when you import records from
somewhere else or didn't save cached values in a backup.

There's a bit of extra complication when Link records have been (un)deleted or
(un)approved where the points given to the child disappear and reappear
(creators are always charged for the points spent).  We generally calculate
based on the final deleted state for the latest award ceremony.  Though you may
want to calculate the state of the system as of a particular date in the past.

The LedgerAwardCeremony class has functions for keeping track of the latest
award ceremony and starting a new one (invoked by a weekly cron script on the
web server or manually).

Bonuses are kept track of by linking the user to various categories, possibly
multiple times.  There's a category for +1 weekly entitlement point for a good
year of posting, another one for -1 weekly point of annual inactivity, or no
bonus for just doing a minor amount of posting during the year.  Those bonus
links are made during the award ceremony on the anniversary of a user's account
activation.


### *LedgerBirthday* < LedgerMedia

Identifies the birthday of a user.  Mostly an excuse to reuse the generic
timestamp field that LedgerAwardCeremony made necessary.

* birthday_at Date and time stamp of when the user was born, or first became
  independently operational.


### *LedgerDeathday* < LedgerMedia

Identifies the date of a user's death.

* deathday_at Date and time stamp of when the user died, or is otherwise no
  longer operational.  May make spouses show up as widows.


## *LinkBase* Classes

This is the base class for links of all kinds between pairs of objects.  There
is one database table for all instances of this class and subclasses.  The
particular subclass identifies what the link's purpose is (object A owns object
B, object A is a list header and B is in the list, etc).

* id The usual big (64 bit) integer unique record sequence number so that we
  can refer to the link record, currently only used by LedgerChangeMarkings and
  similar operations.  Write-once.
* type string  The name of the subclass to use for this record.  Write-once.
* parent_id Points to the LedgerBase object (or subclass) which is usually the
  main one in the association.  Generally the older one is the parent (eg:
  original post is parent, reply to it is child).  Never NULL.  Use the
  original version's id number.  Write-once.
* child_id Points to the child LedgerBase object (or subclass) which is usually
  the target one in the association (for example, parent_id could be a list
  header record, child_id is something in the list).  Never NULL.  Use the
  original version's id number.  Write-once.
* creator_id Identifies the LedgerUser who created this link.  Never NULL.  Use
  the original version's id number.  Write-once.
* deleted boolean True if there is a LedgerChangeMarkings record that deletes
  this record, otherwise false (this record is alive).  Any rating points
  gained by the child object through this link vanish when it is deleted, as if
  they never were transfered.  However, the rating points spent by the user to
  make the link are not returned to the user (otherwise they could temporarily
  transfer points and someone else could spend more than they are allowed).
  Can undelete with another LedgerChangeMarkings; one more good reason for
  keeping the rating points spent.  Changed as needed.
* expired boolean False.  When true (usually set by the weekly award ceremony
  prior to garbage collection at the next ceremony), the record will be deleted
  soon.  Other than displaying a warning to the user when viewing this link
  (suggesting that they spend some points to revive it), doesn't affect how the
  record is treated.  Changed as needed.
* approved_parent boolean  See approved_child description.  Changed as needed.
* approved_child boolean False if a particular end of the link hasn't been
  approved.  The link record exists but it can't be traversed by ordinary users
  until both ends have been approved.  Like being deleted, the points for
  parent or child aren't awarded until all ends of the link have been approved.
  The typical use case will be someone posting a message to a discussion group
  by adding a link between their post and the group.  The approved_child end
  (assuming the post is the child) is set to true when it is created since the
  link creator is the same as the post's creator.  If the group's permission
  for that user allows auto-approval (such as a post by the creator of the
  group), the link is created with the approved_parent flag is set to true.  If
  approval isn't automatic, then the new link is considered to be pending and
  the flag(s) start out false.  Later on someone with appropriate permissions
  (usually a group moderator) can approve the pending post link by using a
  LedgerChangeMarkings record.  Approval can be revoked the same way, or the
  link could just be deleted if you want to reject it more completely (still
  could get undeleted).  Combined with the deleted boolean, a record is
  normally only seen if it is both fully approved and not deleted.  Changed as
  needed.
* rating_points_spent float The number of points spent on making this link by
  the creator.  Includes transaction fees (larger fees for storing more bytes
  and a base fee to avoid high speed trading problems).  Points after the fees
  will be given to the child and parent objects, the split decided by the user.
  Needed so that a reply to a post will boost the rating of both the post and
  the reply (so they both have longer lifetimes).  Write-once.
* rating_points_boost_child float The number of points used to boost the rating
  of the child object, equals spent minus fees and minus parent boost.  Over
  time they are considered to fade (the value in the database doesn't change,
  we just calculate the current faded value when needed), and when enough time
  has gone by, you can remove this link completely from the database.  If the
  child object no longer has any points, it can be deleted too, and so on.
  We'll probably do that as part of the weekly point updates - if the total is
  near zero (under 0.01, about 3 years of fading for one point), the link or
  object can be deleted.  Write-once.
* rating_points_boost_parent float The number of points to boost the rating of
  the parent.  Write-once.
* rating_direction_child char  Write-once.
* rating_direction_parent char How the points from the creator are applied to
  the child and parent objects (both are usually but not always in the same
  direction), can be "U" for up, "D" for down or "M" for meh.  Write-once.
* rating_ceremony integer The week's award ceremony number when this record was
  created, 0 if before any ceremonies have been done.  Lets us easily calculate
  the current faded value of the rating points.  This field can be recalculated
  by looking at this record's created_at date and cross referencing with all the
  LedgerAwardCeremony records up to the creation time.  Write-once.


### *LinkOwner* < LinkBase

The parent is a LedgerUser who is to be treated almost the same as the creator
of the object specified as the child of the link.  They can do everything the
creator can do, except change the creator.  This record is also used to link
the object to the creator if the creator doesn't spend points on the object via
some other LinkBase record (such as a LinkReply or LinkGroupContent).  That's
because the implied LinkCreator (the creator_id field in the LedgerBase record)
has zero reputation points assigned to it.  If we just created the object, at
the next awards ceremony it would have zero points and be garbage collected.
Also by using a LinkOwner, rather than having an implied LinkCreator with a
fixed 1.0 fee, we can charge a larger and variable fee for more resource
consuming objects, such as big media files.

Only the creator or an existing owner can approve new owners of an object.

Adding an owner to a LedgerUser currently doesn't do much, but in future it
could be a way of letting multiple people control a person or company account.


### *LinkReply* < LinkBase

The child is a reply to the parent.  Usually both objects are LedgerPost, or at
least LedgerContent.


### *LinkMedia* < LinkBase

The child is some sort of media which should be displayed when the parent is
shown.  Usually the parent is a LedgerPost and the child is a LedgerMedia of
some type.  We just treat them all as pictures and show them in a grid after
the text of the post (grid order determined by the order of datestamps of these
link records).  The user can click on individual ones to play them.


### *LinkHomeContent* < LinkBase

Parent is a Ledger(Full/Sub)group or LedgerThing and child is usually a
LedgerPost.  That post will be used as the home post (home page, status page,
profile page, description, etc) for the parent.  If there are several, we show
them all, kind of like a list of announcements or pinned posts.  Delete the
LinkHomeContent to unpin them.


### *LinkHomeGroup* < LinkBase

Parent is a LedgerUser and child is a LedgerFullGroup.  That group will be used
as the home page for the user, combined with some user related information
(like a list of all their posts, time of last logon, etc).  Normally the group
will be created when the user is created, with the user listed as the group's
creator.  That way they'll be able to control who can see their personal posts.
If someone wants to follow that user, they will simply subscribe to the group
as a reader.  If there are several records, only the latest one will be used.

### *LinkRole* < LinkBase

Specifies the role a person has in a group.  Parent is the LedgerFullGroup,
child is the LedgerUser.

* role_priority integer Specifies the role as a number; lower ones have fewer
  permissions and 10 or less means banned.  The roles are 10 times (in case we
  want to insert new roles) the list numbers from the table in the [Permissions
  Role Model](#permissions-role-model) section of this document.  Owner and
  creator roles can't be declared by LinkRole records, use LinkOwner and the
  actual creator field in the group object.


### *LinkGroupRoleDelegation* < LinkBase

Specifies that the parent LedgerFullGroup is used for permission checks for
users trying to access the child LedgerSubgroup.  If there is more than one of
these records, they're all checked until one of them gives permission or all of
them deny permission.


### *LinkGroupContent* < LinkBase

Links a child LedgerContent (usually a LedgerPost or LedgerMedia) to a parent
LedgerFullGroup or LedgerSubgroup.  Means that the child is considered part of
the group's displayable content and will use the group's permissions to decide
who can see the child.  Quite often the links will be pending until each end is
approved by a moderator or higher role (usually moderator at the group end,
owner/creator at the post end).  Note that all replies to a post that are in
the same group also need a LinkGroupContent record, since group inclusion can
change from post to post as the users wish (user interface defaults to using
the same groups as the original post when replying).

Unlike most Links where only the owner or creator of the linked to thing can
change the approval, group message moderators can change the approval of the
parent (group) end of this link (since it's trying to connect to their group).
As well, they can also delete this link (to get it out of their pending things
to moderate list).

* display_priority integer Importance of showing this object.  Higher numbers
  for content which is more likely to be an original post, the start of a chain
  of replies.  Saves having to hunt for top posts every time we display the
  group's feed.  Also since someone could retroactively make a top post be a
  reply to something else, this maintains its topness.


### *LinkSubgroup* < LinkBase

Specifies that the child LedgerSubgroup or LedgerFullGroup is subordinate to
the parent LedgerFullGroup or LedgerSubgroup.  Used for making a directed graph
structure of groups in order to classify things (like photos or posts attached
to individual group objects) or otherwise break them down into more managable
smaller chunks.  Multiple parents are allowed and you can make cycles if you
wish.


### *LinkRelationship* < LinkBase

This is the abstract base class to show the parent and child are LedgerUser
objects in some sort of relationship, such as parent, child, spouse, friend,
enemy, employer, follower.

Only the creator and people who need to give approval can delete it.

Of course, the link will fade away over time unless new reputation points are
spent to create a fresh copy.  Thus you may have several copies of the same
relationship in the database.  Whichever one is undeleted and has full
approvals will be used to find people with the relationship.

All ends of the link which are the same as the creator are automatically
approved.  Other ends will be in a pending state until the referred person uses
a LedgerChangeMarkings to approve their end.  Where you can approve, you can
also unapprove your end of the relationship.  Until both are approved, it's a
partial relationship (admirer rather than friends) and not usually shown to
users or used for finding related people.

When finding posts for a person's feed, items from related people will be given
increased priority.

* comment string Up to 255 bytes of kramdown formatted text describing the
  relationship.


#### *LinkSymmetricRelationship* < LinkRelationship

Relationships can be symmetric (friend/friend) or asymetric (parent/child).
This subclass handles the symmetric ones.  For searching efficiency, we'll just
arbitrarily make the older user (lower ID number) the parent_id in symmetric
links.

Subclasses of this will export a function that finds all people related to a
specified bunch of people, such as Friends(X).  Note the input X is a
collection of people, so we can use the results of a previous relationship test
as input.  That way Enemies(Enemies(X)) works, if you want to give permissions
to enemies of X's enemies.


#### *LinkAsymmetricRelationship* < LinkRelationship

Asymmetric relationships have distinctly different ends of the relationship
(such as real world parent and child, or Follower/Leader, Employer/Employee).
The particular relationship class will define which one goes in the parent
field and which is the child.

Subclasses will export two functions that find all people that are related to a
specified person, one for each end, so you can ask for all employees of a boss
via Employees(x) or ask for all bosses of an employee via Bosses(x).


#### *LinkOneWayRelationship* < LinkAsymmetricRelationship

Rather than two way relationships, some are one way such as follower.  The
person being followed (a Leader) doesn't have a say in whether they're being
followed.  Thus approval is always given for the child end and the relationship
is set up with the originator as parent (follower in the parent field, followed
or leader in the child field).  If the parent is the creator, they're
automatically approved.  Only the creator and parent can delete this link.


##### *LinkFriend* < LinkSymmetricRelationship

The parent is a friend of child.  This is a bidirectional relationship so both
ends are friends with each other.  If one end hasn't approved the friendship,
then we'll refer to it as an unacknowledged friendship and perhaps say X is
admired by Y and Y has an admirer.  If neither are approved, then it's a
suggested (by the creator) friendship.


##### *LinkEnemy* < LinkSymmetricRelationship

You can declare your enemies too, if they agree.  Bidirectional like
LinkFriend.  Real enemies will give and accept negative points.  Don't expect
that to happen often.


##### *LinkSpouse* < LinkSymmetricRelationship

Parent is a spouse of child.  Bidirectional.  Both ends need to be approved.


##### *LinkParentChild* < LinkAsymmetricRelationship

Parent is parent in real life of child.  Both ends need to be approved.


##### *LinkEmployerEmployee* < LinkAsymmetricRelationship

Parent is the employer or company employing the child.  Both ends need to be
approved.  Otherwise you'll see something like "claims to be employed by X".


##### *LinkFollower* < LinkOneWayRelationship

Parent LedgerUser is a fan or at least interested in the child.  If you like
the child LedgerUser, send some positive points, negative if you hate them.
They receive those points either way.


### *LinkOpinion* < LinkBase

Parent LedgerUser (usually the creator too) has an opinion about the child
object (usually a LedgerContent or a LedgerUser or LedgerThing).  Can be
positive or negative or meh, decided by the points awarded to the child.
Usually no points awarded to the parent, unless a third party is essentially
paying someone to have an opinion.  Automatically approved for the child end,
parent end auto approved if it is the creator, and can only be deleted or
unapproved by the creator or parent end.

For example, if you like a post, you can make a LinkOpinion referencing the
post (as the child object) and give it some of your rating points.  The parent
field would identify you as the person with the opinion.

#### Taking it Meta ####

You can have an opinion about someone else's opinion.  If you don't like the
rating someone made on a post, you can make a LinkOpinion that has an AuxLink
record referencing their rating (which is itself another LinkOpinion) and
perhaps give some opposite points to the post (specified in the child field) to
counter the bad rating.  Or you could specify the person with the bad opinion
as the child and rate them directly.  Since the child field can't be NULL, give
the user the choice of the child of the original opinion (the post), the
creator of the opinion, the parent of the opinion (usually the opinion's
creator too) or the creator of the original opinion child (the post's creator).
It doesn't affect the original opinion's operation, which doesn't have a
reputation rating of its own.

Your meta opinion doesn't have to always be about some other opinion.  If you
like the way someone connected a bit of useful information (an existing old
post answering a frequently asked question) as a reply to a new post, you can
reward them for making that link with a LinkOpinion's AuxLink referencing the
LinkReply record and with the creator of the LinkReply as the rewarded child.

You can have an opinion about multiple other links, perhaps saying that they
are all spam.  But probably should limit it to one.

* comment string Up to 255 bytes of kramdown formatted text describing the
  opinion.
* meta_link boolean True if the opinion is actually about another opinion or
  other LinkBase connection, specified by an AuxLink record.  The child (the
  object which gets rating points) will usually be one or the other end of the
  mentioned link or its creator.  False means don't bother searching for an
  AuxLink record; it shouldn't exist.  Mostly this field exists to avoid
  searching for AuxLink records every time an opinion is shown.
* secret boolean True if it should be hidden from most users, sort of like
  secret ballots.


#### *LinkMetaMod* < LinkOpinion

This is an opinion about someone else's opinions, used for meta-moderation.
The main difference is that it is anonymous (the parent is hidden to most
people).  Usually members of a group will on occasion (much more often if they
have the meta-moderator role in the group) be shown a random opinion about a
message in the group (usually a recent one, but not always).  They can decide
how many points to award and in which direction to the person making the
opinion.  Additionally they will receive a bit of a positive reward too, and
for convenience the LinkMetaMod will be initially approved on the parent end
rather than needing the creator to be the parent for pre-approval.  The group
will pay for the points and be listed as the creator of the LinkMetaMod record.

For meta-meta-moderation, we'll just use an annual performance review for the
more significant meta-moderators (since they get paid in points, they could do
this as a kind of job, and moderators would also get points from the
meta-moderator operation, and the group could get points by having a weekly
membership fee).


## Auxiliary Classes

### *AuxLink*

This database table and class is used for connecting LedgerBase records (a
LedgerChangeMarkings usually) and LinkBase records.  Used for deleting &amp;
undeleting, and only for LinkBase subclasses - giving approvals.  The main
difference with LinkBase is that no rating points are involved.

* parent_id Points to a LedgerBase record doing something to a link.
* child_id Points to a LinkBase record being modified in some way.
* No time stamps or other fields, see the parent_id for the date etc.


### *AuxLedger*

Like AuxLink, but for connecting LedgerBase objects (usually a
LedgerChangeMarkings object) to child LedgerBase objects (such as things being
deleted).

* parent_id Points to a LedgerBase record doing something to an object.
* child_id Points to a LedgerBase record being modified in some way.
* No time stamps or other fields, see the parent_id for the date etc.


## Generating the Database

Here are the rails command lines and edits needed to generate the database:

<PRE>rails generate model LedgerBase type:string
bool1:boolean date1:datetime number1:integer string1:string string2:string
text1:text creator:references original:references amended:references
deleted:boolean current_down_points:float current_meh_points:float
current_up_points:float

rails generate model LinkBase type:string
parent:references child:references creator:references deleted:boolean
pending:boolean rating_points_spent:float rating_points_boost_child:float
rating_points_boost_parent:float rating_direction:string award_number:integer

rails generate model AuxLedger parent:references child:references

rails generate model AuxLink parent:references child:references

# And for subclasses, do something like this:

rails generate model LedgerList --parent=LedgerBase

</PRE>

Combine and edit the migration files to have default values and better field
details like this:

<PRE>class CreateLedgerAndLinkBases < ActiveRecord::Migration[6.0]
  def change
    create_table :ledger_bases, force: false, comment: "Ledger objects base class and record.  Don't force: cascade deletes since this is a write-once ledger where usually nothing gets deleted (except during points expired object garbage collection)." do |t|
      t.string :type, default: "LedgerBase", comment: "Names the ActiveRecord subclass used to load this row, turning on single table inheritance."
      t.references :original, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeroriginal"}, comment: "Points to the original version of this record, or equal to id if this is the original one.  NULL if not initialised (should be a copy of the id of this record)."
      t.references :amended, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeramended"}, comment: "Points to the latest version of this record, or NULL if this is not the original record."
      t.boolean :deleted, default: false, comment: "True if there is a LedgerChangeMarkings record that is currently deleting this record, otherwise false (record is alive)."
      t.boolean :has_owners, default: false, comment: "True if there is one or more LinkOwner records (even deleted ones) that references this record.  False if there are none, which means we can skip searching for LinkOwner records every time we check permissions, which saves a lot of database queries!"
      t.boolean :is_latest_version, default: true, comment: "True if the record is the latest version of the object.  False otherwise.  Caches the result of looking up the original object and seeing which record is the latest, so we have less overhead when displaying only the latest versions in a list of posts.  Also lets us skip older versions directly in an SQL query."
      t.references :creator, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgercreator"}, comment: "Identifies the user who created this record, using their original ID."
      t.boolean :bool1, default: false, comment: "Generic boolean, defined by subclasses."
      t.bigint :number1, default: 0, comment: "Generic number for counting things, or referencing other database tables, usage defined by subclasses."
      t.string :string1, default: "", comment: "Generic string (up to 255 bytes), defined by subclasses."
      t.string :string2, default: "", comment: "Generic string (up to 255 bytes), defined by subclasses."
      t.text :text1, default: "", comment: "Generic text (lots of characters), defined by subclasses."
      t.datetime :date1, null: true, comment: "Generic date and time from year 0 to year 9999, defined by subclasses."
      t.float :current_down_points, default: 0.0, comment: "Number of rating points in the down direction for this object. This is the current total, including fading over time (recalculated at the beginning of the week in the awards ceremony) plus new ratings applied this week."
      t.float :current_meh_points, default: 0.0, comment: "Number of rating points in the meh non-direction for this object. This is the current total, including fading over time (recalculated at the beginning of the week in the awards ceremony) plus new ratings applied this week."
      t.float :current_up_points, default: 0.0, comment: "Number of rating points in the up direction for this object. This is the current total, including fading over time (recalculated at the beginning of the week in the awards ceremony) plus new ratings applied this week."
      t.integer :current_ceremony, default: -1, comment: "The number of the awards ceremony that the current points were calculated for.  0 means before the first ceremony.  Set to -1 if needs recalculation based on date created."
      t.timestamps
    end

    add_index :ledger_bases, :string1
    add_index :ledger_bases, :string2
    add_index :ledger_bases, :number1

    create_table :link_bases, force: false, comment: "LinkBase base class and record for linking LedgerObjects together." do |t|
      t.string :type, default: "LinkBase", comment: "Names the ActiveRecord subclass used to load this row, turning on single table inheritance."
      t.references :parent, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkparent"}, comment: "Points to the parent LedgerBase object (or subclass) which is usually the main one or older one in the association.  Uses the original ID of the parent."
      t.references :child, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkchild"}, comment: "Points to the child LedgerBase object (or subclass) which is the child in the association.  Uses the original ID of the child."
      t.references :creator, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkcreator"}, comment: "Identifies the User who created this link, using their original ID."
      t.bigint :number1, default: 0, comment: "Generic number for counting things, or referencing other database tables, usage defined by subclasses."
      t.string :string1, default: "", comment: "Generic string (up to 255 bytes), defined by subclasses."
      t.boolean :deleted, default: false, comment: "True if there is a LedgerChangeMarkings record that deletes this record, otherwise false (this record is alive)."
      t.boolean :approved_parent, default: false, comment: "True if the link to the parent object has been approved.  False means it's pending; the link record exists but it can't be traversed (sort of like being deleted) until someone gives permission via LedgerChangeMarkings."
      t.boolean :approved_child, default: false, comment: "True if the link to the child object has been approved.  False means it's pending; the link record exists but it can't be traversed (sort of like being deleted) until someone gives permission via LedgerChangeMarkings."
      t.float :rating_points_spent, default: 0.0, comment: "The number of points spent on making this link by the creator."
      t.float :rating_points_boost_child, default: 0.0, comment: "The number of points used to boost the rating of the child object."
      t.float :rating_points_boost_parent, default: 0.0, comment: "The number of points used to boost the rating of the parent object."
      t.string :rating_direction, default: "M", comment: "Use U for up, D for down or M for meh."
      t.integer :rating_ceremony, default: 0, comment: "The week's award ceremony number when this record was created, 0 if before time starts."
      t.timestamps
    end

    add_index :link_bases, :string1
    add_index :link_bases, :number1

    create_table :aux_links, force: false, comment: "AuxLink class and record for connecting LedgerObjects (usually LedgerChangeMarkings) to LinkBase records (usually links being deleted)." do |t|
      t.references :parent, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_auxlinkparent"}, comment: "Points to the LedgerBase object (or subclass) which has the delete or undelete or give permission order."
      t.references :child, null: false, foreign_key: {to_table: :link_bases, name: "fk_rails_auxlinkchild"}, comment: "Points to the child LinkBase object (or subclass) which is being modified by the parent."
    end

    create_table :aux_ledgers, force: false, comment: "AuxLedger class and record for connecting LedgerBase records (usually LedgerChangeMarkings) to other LedgerBase records (usually objects being deleted)." do |t|
      t.references :parent, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_auxledgerparent"}, comment: "Points to the LedgerBase object (or subclass) which has the delete or undelete order."
      t.references :child, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_auxledgerchild"}, comment: "Points to the child LedgerBase object (or subclass) which is being modified by the parent."
    end

    create_table :group_settings, comment: "Extra information for each LedgerFullGroup object is stored in this table." do |t|
      t.references :ledger_full_group, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_groupsettingsgroup"}, comment: "Points to the LedgerFullGroup (a LedgerBase subclass) that this record contains the extra settings for."
      t.boolean :auto_approve_non_member_posts, default: false, comment: "True if posts attached to the group by a non-member are automatically approved (if they have enough points).  False means a moderator will need to approve them."
      t.boolean :auto_approve_member_posts, default: true, comment: "True if posts attached to the group by a member are automatically approved (if they have enough points).  False means a moderator will need to approve them.  Weird if you only auto-approve non-members."
      t.boolean :auto_approve_members, default: false, comment: "True if new member applications are automatically approved (if they have enough points).  False requires approval by a member moderator."
      t.float :min_points_non_member_post, default: -1.0, comment: "Minimum number of net rating points needed when posting as a non-member to get automatic approval.  If they don't have enough, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :max_points_non_member_post, default: 2.0, comment: "Maximum number of net rating points allowed when posting as a non-member to get automatic approval.  If they have too many, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :min_points_member_post, default: -10.0, comment: "Minimum number of net rating points needed when posting as a member to get automatic approval.  If they don't have enough, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :max_points_member_post, default: 10.0, comment: "Maximum number of net rating points allowed when posting as a member to get automatic approval.  If they have too many, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :min_points_membership, default: 1.0, comment: "Minimum number of net rating points needed when applying to be a member to get automatic approval.  Ignored if automatic approval is turned off.  If they don't get automatically approved, a moderator will need to approve their request."
      t.float :max_points_membership, default: 100.0, comment: "Maximum number of net rating points allowed when applying to be a member to get automatic approval.  Ignored if automatic approval is turned off.  If they don't get automatically approved, a moderator will need to approve their request."
      t.string :wildcard_role_banned, default: "", comment: "Wildcard expression to identify people who are banned, in addition to explicit LinkRole records.  So we can ban friends of banned people, etc."
      t.string :wildcard_role_reader, default: "", comment: "Relationship expression specifying additional people who are allowed to read the group."
      t.string :wildcard_role_member, default: "", comment: "Relationship expression specifying additional people who are considered members of the group, even if they didn't apply."
      t.string :wildcard_role_message_moderator, default: "", comment: "Relationship expression specifying additional people who are allowed to moderate (approve/delete) messages."
      t.string :wildcard_role_meta_moderator, default: "", comment: "Relationship expression specifying additional people who are allowed to anonymously rate opinions about messages in this group."
      t.string :wildcard_role_member_moderator, default: "", comment: "Relationship expression specifying additional people who are allowed to moderate membership requests."
    end
  end
end
</PRE>

Flesh out ledger_base.rb and link_base.rb with a few associations too:

<PRE>
class LedgerBase < ApplicationRecord
  # Always have a creator, but "optional: false" makes it reload the creator
  # object every time we do something with an object.  So just require it to
  # be non-NULL in the database definition.
  belongs_to :creator, class_name: :LedgerBase, optional: true

  belongs_to :original, class_name: :LedgerBase, optional: true
  belongs_to :amended, class_name: :LedgerBase, optional: true

  has_many :link_downs, class_name: :LinkBase, foreign_key: :parent_id
  has_many :descendants, through: :link_downs, source: :child
  has_many :link_ups, class_name: :LinkBase, foreign_key: :child_id
  has_many :ancestors, through: :link_ups, source: :parent

  has_many :aux_ledger_downs, class_name: :AuxLedger, foreign_key: :parent_id
  has_many :aux_ledger_descendants, through: :aux_ledger_downs, source: :child
  has_many :aux_ledger_ups, class_name: :AuxLedger, foreign_key: :child_id
  has_many :aux_ledger_ancestors, through: :aux_ledger_ups, source: :parent
  has_many :aux_link_downs, class_name: :AuxLink, foreign_key: :parent_id
  has_many :aux_link_descendants, through: :aux_link_downs, source: :child
end

class LinkBase < ApplicationRecord
  belongs_to :parent, class_name: :LedgerBase, optional: false
  belongs_to :child, class_name: :LedgerBase, optional: false
  belongs_to :creator, class_name: :LedgerBase, optional: false

  has_many :aux_link_ups, class_name: :AuxLink, foreign_key: :child_id
  has_many :aux_link_ancestors, through: :aux_link_ups, source: :parent
end
</PRE>

Then do rails db:seed to set up the initial database contents.  One key step is
making the root LedgerBase object, with itself as its creator.

<PRE>ActiveRecord::Base.connection.execute(
  "INSERT into ledger_bases
    (id, string1, string2, text1, creator_id, created_at, updated_at)
  VALUES
    (0, 'Root LedgerBase Object', 'agmsmith@@ncf.ca', 'The special root object
    which we need to manually create with a creator id of itself.  Then initial
    system objects can be created with it as their creator.  AGMS20200206', 0,
    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);"
)
</PRE>


## Test Plan - A few Use Cases

A new user writes a message.  Another user replies to it.  First user edits
their message.  What does second user see?  First user replies to second user's
message.  First user deletes their original message.

A user adds some photos and videos to a message.  They are separate objects,
and need the expendature of rating points to be attached (more points are
required for a larger number of bytes).  What happens when they run out of
points?  Do they get attached to the message and show up when it is displayed?

First user sets up a small category tree and adds a message to a couple of
categories.  Second user navigates tree to see messages about their favourite
topic.

Weekly batch processing adds some reputation points to first and second user.
First user likes second user, awarding some up points, declaring their
appreciation.  Second user awards some down points to first user, declaring
their disgust.  What are their total points?  Another weekly batch run happens.
What are their points?

## Change Log

<PRE>
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.57 2021/07/13 23:59:23 agmsmith Exp agmsmith $

$Log: Database\040Design.md,v $
Revision 1.57  2021/07/13 23:59:23  agmsmith
Added opinionator role, message moderation and meta opinions updated.
LedgerDelete and LedgerApprove et al replaced by LedgerChangeMarkings.
Ceremony rework in progress.

Revision 1.56  2021/01/16 17:25:05  agmsmith
Typo.

Revision 1.55  2021/01/10 22:42:02  agmsmith
Clarify current_ceremony negative numbers.

Revision 1.54  2021/01/10 20:33:51  agmsmith
More award ceremony clarification.

Revision 1.53  2021/01/08 23:00:03  agmsmith
Explain award ceremony.

Revision 1.52  2021/01/08 18:41:24  agmsmith
Added more award ceremony fields; starting to implement them.

Revision 1.51  2021/01/04 17:22:42  agmsmith
Added LedgerThing and some LinkOpinion clarification.

Revision 1.50  2020/09/20 23:45:52  agmsmith
Need to have a subject for posts, add a string for generic content classes.

Revision 1.49  2020/09/13 20:48:36  agmsmith
Add note to is_latest_version as being useful in SQL queries too.

Revision 1.48  2020/09/11 01:26:12  agmsmith
Make the default of is_latest_version true, since new records are usually
latest.

Revision 1.47  2020/09/10 21:58:31  agmsmith
Add change log to index.

Revision 1.46  2020/09/10 21:57:02  agmsmith
Add is_latest_version field, to optimise version checking.

Revision 1.45  2020/08/06 22:53:07  agmsmith
Update database migration example with current version.

Revision 1.44  2020/08/05 20:42:14  agmsmith
Added has_owners field to LedgerBase.

Revision 1.43  2020/08/04 21:18:02  agmsmith
Add LinkHomeGroup, for user's home page.

Revision 1.42  2020/08/02 20:46:02  agmsmith
Move class structure retrospective regrets to later in the introduction.

Revision 1.41  2020/07/15 20:46:09  agmsmith
amended_id now used in later versions to detect race conditions.

Revision 1.40  2020/07/15 01:21:50  agmsmith
Add a note about multipurpose class structure maybe better than separate object
and links.

Revision 1.39  2020/07/14 00:22:05  agmsmith
Better wording.

Revision 1.38  2020/07/14 00:17:38  agmsmith
Group message moderators have special powers over LinkGroupContent that links
something to their group.

Revision 1.37  2020/07/12 01:00:19  agmsmith
Both ends of the link need to be approved before points awarded.

Revision 1.36  2020/07/10 19:35:35  agmsmith
Mention that the original version's id number is stored in various records.

Revision 1.35  2020/07/07 21:35:52  agmsmith
Put some of the exploratory explanations near the beginning, leaving the class
definitions at the end.

Revision 1.34  2020/07/07 20:51:57  agmsmith
Added meta-moderation idea from a discussion on Slashdot.

Revision 1.33  2020/07/04 16:58:42  agmsmith
No GroupSettings_id field needed, separate table indexed by id of the group
instead.

Revision 1.32  2020/06/30 20:51:44  agmsmith
Added database setup for GroupSettings table.

Revision 1.31  2020/06/30 00:24:46  agmsmith
Proof-reading pass.  Fix conceptual problem - no owners of links.  Also clarify
who can delete links (if you need approval, you can delete it too).

Revision 1.30  2020/06/29 20:27:42  agmsmith
Nope, not owners, else you could get someone to preapprove a relationship.

Revision 1.29  2020/06/29 15:43:14  agmsmith
Work out Relationship class structure, write up a bit more about relationships
and the dimensions of symmetry and approval.

Revision 1.28  2020/06/29 01:01:00  agmsmith
Added relationships section.

Revision 1.27  2020/06/27 21:30:08  agmsmith
Proof reading.  Added Subgroups.  Wildcard language.

Revision 1.26  2020/06/26 00:37:21  agmsmith
Added LinkRelationship, removed LinkPermission.

Revision 1.25  2020/06/25 00:06:50  agmsmith
Decide on making ungrouped posts public.  Add LinkOwner record.

Revision 1.24  2020/06/24 11:18:49  agmsmith
More work in progress on permission roles and discussion groups.

Revision 1.23  2020/06/21 00:20:58  agmsmith
Working on the Permissions Model.  Idea of Groups for all posts, roles.

Revision 1.22  2020/06/20 17:14:23  agmsmith
Rework approval vs deletion of records.  Now have separate child and parent end
of the link approval flags.  Delete is orthogonal to approval.

Revision 1.21  2020/06/15 15:56:25  agmsmith
Rewording, also combine pending and deleted functionality into the same thing
(granting permission undeletes a record).

Revision 1.20  2020/04/10 15:58:33  agmsmith
Have original_id be NULL on creation, but soon changing to copy of id.

Revision 1.19  2020/04/10 15:40:04  agmsmith
Update migration comment for original_id.

Revision 1.18  2020/04/10 15:37:19  agmsmith
Change original_id to be equal to id for the original record, not NULL.

Revision 1.17  2020/03/28 16:19:43  agmsmith
Split out AuxLink and AuxLedger records, making things simpler again.

Revision 1.16  2020/03/28 13:18:21  agmsmith
Typos.

Revision 1.15  2020/03/27 19:03:58  agmsmith
Minor typos fixed.

Revision 1.14  2020/03/26 20:25:45  agmsmith
Rethought deleting and permissions.

Revision 1.13  2020/02/20 21:45:08  agmsmith
Fix typos after proofreading.

Revision 1.12  2020/02/07 15:28:32  agmsmith
Mention initialising the root object in the database.

Revision 1.11  2020/02/04 22:20:21  agmsmith
Proof reading pass done.  Also added list design choices.

Revision 1.10  2020/02/03 22:33:40  agmsmith
Fix up formatting in kramdown for preformatted code.

Revision 1.9  2020/02/03 22:26:20  agmsmith
Added command lines needed to generate the database.

Revision 1.8  2020/02/02 22:15:24  agmsmith
Added permissions records.

Revision 1.7  2020/02/02 21:44:52  agmsmith
After some experiments, decided to use floating point rating points.

Revision 1.6  2020/01/31 21:54:25  agmsmith
Work in progress adding fields and descriptions, worrying about deleting.

Revision 1.5  2020/01/30 22:16:28  agmsmith
Starting to add fields to the base object record.

Revision 1.4  2020/01/30 15:45:39  agmsmith
Explain the ledger write-once system and single table inheritance.

Revision 1.3  2020/01/30 14:40:09  agmsmith
Writing continues, work in progress.

Revision 1.2  2020/01/29 22:52:13  agmsmith
Fixed up formatting of RCS log and version number.

Revision 1.1  2020/01/29 22:43:07  agmsmith
Initial revision
</PRE>
@


1.57
log
@Added opinionator role, message moderation and meta opinions updated.
LedgerDelete and LedgerApprove et al replaced by LedgerChangeMarkings.
Ceremony rework in progress.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.56 2021/01/16 17:25:05 agmsmith Exp agmsmith $</SMALL>
d10 1
a10 1
Because I'm planning on implementing the reputation system as a BlockChain
d19 3
a21 3
book review).  I'm using separate link records rather than parent references in
the objects so that an object can have multiple parents (useful for filing
something under multiple categories).
d27 6
a32 6
to the original text object record.  Then when displaying the original text, it
will search for newer versions and display that text instead.  But new
references (links) to the text (such as replies) will still reference the
original text record, since that has a more constant identity then possibly yet
more new text records.  Advanced users can view a list of all those text
records and see the change history.
d36 2
a37 2
modified, instead a new deletion record is created, referencing the original
link record.
d62 5
a66 6
ActiveRecord function.  So where the base may have a generic string1 and
string2 field, a User subclass could rename those as FullName and EMailAddress,
with "alias_attribute :full_name, :string1" and "alias_attribute
:email_address, :string2".  ActiveRecord will then automatically build queries
using the actual database field (string1, string2) names whenever we use the
subclass object.
d101 2
a102 1
of opinions up.
d123 1
a123 1
Same for posts that aren't referenced much.
d192 4
a195 3
to create the link; each approves their end using a LedgerApprove record.
Other times we have a one way relationship, such as a fan of a movie star, and
only the fan end needs approval (and that's usually automatic).
d233 1
a233 1
that specifies the highest role they have.
d238 4
a241 3
   groups also automatically approve posts by members.  Others require approval
   by a moderator.  By the way, there's no permission needed to request that a
   post be added to a group, so even a non-member could do that.
d372 10
a381 5
* deleted boolean True if there is a LedgerDelete record that is currently
  deleting this record, otherwise false (record is alive).  A deleted object
  just shows a warning message to the user when an attempt is made to display
  it.  Rating points are accumulated as usual.  That way we can undelete this
  record if needed.  Changed as needed.
d432 6
a437 5
only the unexpired ones played back in chronological order decide the target
object's status.  So yes, if enough time passes, the LedgerChangeMarkings will
fade away and the targets will no longer be deleted.  Though most often the
targets will have faded away too by that time.  Or we could have a policy of
not garbage collecting LedgerChangeMarkings records.
d450 3
a452 2
  change.  Run them together or put in spaces if you wish, "-D +A" and "-D+A"
  and "+A-D" are equivalent.
d485 1
a485 1
of Companies.
d539 2
a540 1
  difficult).  Have functions for getting the file size, data type, URL, etc.
d601 1
a601 1
  offline while the awards are being calculated.
d629 1
a629 1
### *LedgerBirthday* < LedgerBase
d638 1
a638 1
### *LedgerDeathday* < LedgerBase
d654 2
a655 2
  can refer to the link record, currently only used by LedgerDelete/Undelete
  and similar operations.  Write-once.
d667 5
a671 5
* deleted boolean True if there is a LedgerDelete record that deletes this
  record, otherwise false (this record is alive).  Any rating points gained by
  the child object through this link vanish when it is deleted, as if they
  never were transfered.  However, the rating points spent by the user to make
  the link are not returned to the user (otherwise they could temporarily
d673 8
a680 3
  Can undelete with LedgerUndelete, another good reason for keeping the rating
  points spent.  Changed as needed.
* approved_parent boolean  Changed as needed.
d694 3
a696 3
  LedgerApprove record.  Approval can be revoked by using LedgerUnapprove, or
  the link could just be deleted if you want to reject it more completely
  (still could get undeleted).  Combined with the deleted boolean, a record is
d852 2
a853 2
a LedgerApprove to approve their end.  Where you can approve, you can also
unapprove your end of the relationship.  Until both are approved, it's a
d984 2
d1013 2
a1014 2
LedgerDelete/Undelete or LedgerApprove/Unapprove) and LinkBase records.  Used
for deleting, undeleting, and giving approvals to a LinkBase record.  The main
d1025 2
a1026 1
LedgerDelete/Undelete) to child LedgerBase objects (things being deleted).
d1067 1
a1067 1
      t.boolean :deleted, default: false, comment: "True if there is a LedgerDelete record that is currently deleting this record, otherwise false (record is alive)."
d1095 3
a1097 3
      t.boolean :deleted, default: false, comment: "True if there is a LedgerDelete record that deletes this record, otherwise false (this record is alive)."
      t.boolean :approved_parent, default: false, comment: "True if the link to the parent object has been approved.  False means it's pending; the link record exists but it can't be traversed (sort of like being deleted) until someone gives permission via LedgerApproved."
      t.boolean :approved_child, default: false, comment: "True if the link to the child object has been approved.  False means it's pending; the link record exists but it can't be traversed (sort of like being deleted) until someone gives permission via LedgerApproved."
d1109 1
a1109 1
    create_table :aux_links, force: false, comment: "AuxLink class and record for connecting LedgerObjects (usually LedgerDelete) to LinkBase records (usually links being deleted)." do |t|
d1114 1
a1114 1
    create_table :aux_ledgers, force: false, comment: "AuxLedger class and record for connecting LedgerBase records (usually LedgerDelete) to other LedgerBase records (usually objects being deleted)." do |t|
d1215 1
a1215 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.56 2021/01/16 17:25:05 agmsmith Exp agmsmith $
d1218 5
@


1.56
log
@Typo.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.55 2021/01/10 22:42:02 agmsmith Exp agmsmith $</SMALL>
d240 10
a249 6
4. **Message Moderator**.  Can approve, unapprove (makes it pending approval
   again) and disconnect posts from the group.
5. **Meta Moderator**.  Can make anonymous comments on opinions about messages
   in the group.
6. **Member Moderator**.  Approves and rejects membership requests.
7. **Owner**.  Owners can be added to a group (and other objects) by a
d252 1
a252 1
8. **Creator**.  Has all permissions to modify the object, including changing
d414 1
a414 1
### *LedgerDelete* < LedgerBase
d416 32
a447 49
Used for marking possibly multiple objects as deleted.  AuxLedger and AuxLink
records are used to associate this LedgerDelete with all the objects (both
LedgerBase object records and LinkBase link records) being deleted.  Undelete
is implemented by creating a LedgerUndelete record for the same target objects
(was too messy trying to delete a LedgerDelete; that is not supported).  Can
have several LedgerDelete and LedgerUndelete records affecting the same object;
only the latest unexpired one decides the target object's status.  So yes, if
enough time passes, the LedgerDelete will fade away and the targets will no
longer be deleted.  Though most often the targets will have faded away too by
that time.  Or we could have a policy of not garbage collecting LedgerDelete
and LedgerUndelete records.

You need to be the creator or owner of the object being deleted.

* reason string Reason for deletion.  Text supplied by the user.
* context string The context around the deletion, such as being a manual
  delete button push from a given web page, from a specified IP address.  User
  is implied by the creator of this record.  Automatically generated by the
  system.


#### *LedgerUndelete* < LedgerDelete

Undoes a LedgerDelete and is otherwise similar to it.  Besides being less
confusing than deleting a delete record, this lets us more easily find out who
is deleting a target.  Also, we can undelete a different set of things than
were deleted.


### *LedgerApprove* < LedgerBase

Gives permission for pending links to start working.  To avoid costing a lot of
rating points for approving things like replies to your post or bulk approving
posts to a group, you can specify multiple links with many AuxLink records.
Also used for things like approving a request to join a group (the request is a
LinkBase subclass record joining the person to the group).  Both child and
parent approvals are given, determined by whether you are the child or parent.
To more strongly reject permission, delete the unapproved link with
LedgerDelete (if you need to be asked for approval, you can delete it too).

* reason string  Reason for giving permission, provided by the user.
* context string Where the approval was given (IP address, web page, etc).


#### *LedgerUnapprove* < LedgerApprove

Undoes approval for the specified links.  Not usually useful, since it puts the
links back in pending state.  If you want to reject approval, try deleting the
links.  Otherwise similar to LedgerApprove.
d597 3
a599 3
cached.  We also have a recalculate all cached values feature, in case you
import records from somewhere else or didn't save cached values.  It's useful
for test purposes to compare the cached values calculated both ways.
a610 25
For the full update basically replay everything.  Process both Link and Ledger
records in combined chronological order.  Reset all cached things like delete
and approved flags and current rating points to default values as the records
are processed.  Add changes from Link records to the appropriate cached value
in Ledger records.  Ignore records in the future when doing queries to find
group membership etc.  Probably won't implement the full update unless needed.

For the incremental update, whenever a Link record is being applied to a Ledger
record, first check if the Ledger record is from an earlier ceremony.  If so,
fade the cached points by the fade factor raised to the number of ceremonies
done since the record was last updated.  Then add/subtract points from the
appropriate cached Ledger values.  Generally Link child will have them added to
the appropriate up/meh/down cached value, if the link is approved and not
deleted.  The Link creator has the points spent taken off their current "up"
count or added to their "down" count (which could be a sign of a spending more
points than you should have bug), even for deleted or unapproved links.

For weekly award ceremonies, all User records need to have their entitled
points calculated (based on the various bonuses they are entitled to) and added
to the cached points (after the old cached points are faded).  As well the
remaining entitled points counter for that user is reset (so they can spend a
few points that week even if they are overall negative).  Though we may want to
garnish perhaps half of remaining entitled points to improve their up rating if
they are overall negative (less voice for suppressed people).

d613 4
a616 4
year of posting, another one for -1 weekly point of annual inactivity, and one
for 0 entitlement change for just doing some posting during the year.  Those
bonus links are made during the award ceremony on the anniversary of a user's
account activation.
d926 7
a932 7
Parent LedgerUser (usually the creator) has an opinion about the child object
(usually a LedgerContent or a LedgerUser or LedgerThing).  Can be positive or
negative or meh, decided by the points awarded to the child.  Usually no points
awarded to the parent, unless a third party is essentially paying someone to
have an opinion.  Automatically approved for the child end, parent end auto
approved if it is the creator, and can only be deleted or unapproved by the
creator or parent end.
d938 22
a959 11
A meta example: if you don't like the rating someone made on a post, you can
make a LinkOpinion that has an AuxLink record referencing the rating (which is
itself another LinkOpinion) and give some opposite points to the post
(specified in the child field) to counter the bad rating.  Or you could specify
the person with the bad opinion as the child and rate them.

Or if you like the way someone connected a bit of useful information (an
existing old post answering a frequently asked question) as a reply to a new
post, you can reward them for making that link with a LinkOpinion's AuxLink
referencing the LinkReply record and with the creator of the LinkReply as the
rewarded child.
d1197 1
a1197 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.55 2021/01/10 22:42:02 agmsmith Exp agmsmith $
d1200 3
@


1.55
log
@Clarify current_ceremony negative numbers.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.54 2021/01/10 20:33:51 agmsmith Exp agmsmith $</SMALL>
d598 1
a598 1
  including this one.  In other words, a seqeunce counter starting at 1.  So if
d1224 1
a1224 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.54 2021/01/10 20:33:51 agmsmith Exp agmsmith $
d1227 3
@


1.54
log
@More award ceremony clarification.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.53 2021/01/08 23:00:03 agmsmith Exp agmsmith $</SMALL>
d1089 1
a1089 1
      t.integer :current_ceremony, default: -1, comment: "The number of the awards ceremony that the current points were calculated for.  Set to -1 if not calculated yet or needs recalc."
d1224 1
a1224 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.53 2021/01/08 23:00:03 agmsmith Exp agmsmith $
d1227 3
@


1.53
log
@Explain award ceremony.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.52 2021/01/08 18:41:24 agmsmith Exp agmsmith $</SMALL>
d618 1
a618 3
want to calculate the state of the system as of a particular date in the past,
which can be done by making a copy of the database without all records after
the desired date.
d625 15
a639 12
records in chronological order.  Reset all delete and approved flags to default
values and zero the cache as the records are processed.  Add changes from Link
records to the appropriate cached value in Ledger records.  Ignore records in
the future when doing queries to find group membership etc.

For the incremental update, whenever a Link record is being applied, first
check if the Ledger record is from an earlier ceremony.  If so, fade the cached
points by the fade factor raised to the number of ceremonies done since the
record was last updated.  Then add/subtract points from the appropriate cached
Ledger values.  Generally Link child will get them added to the appropriate
up/meh/down cached value.  The Link creator has the points spent taken off
their cached "up" count (after an update if needed).
d643 5
a647 2
to the cached points (after cached are faded).  As well the remaining entitled
points counter for that user is reset.
d650 5
a654 4
multiple times.  There's a category for +1 weekly point for a good year of
posting, another one for -1 weekly point of annual inactivity, and one for 0
change for just doing some posting during the year.  Those links are made
during the award ceremony on the anniversary of a user's account activation.
d1224 1
a1224 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.52 2021/01/08 18:41:24 agmsmith Exp agmsmith $
d1227 3
@


1.52
log
@Added more award ceremony fields; starting to implement them.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.51 2021/01/04 17:22:42 agmsmith Exp agmsmith $</SMALL>
d389 14
a402 15
* current_up_points float  Number of rating points in each
  of the directions for this object.  This is the current total, including
  fading over time (recalculated at the beginning of the week in the awards
  ceremony) plus new ratings applied this week.  If the related current ceremony
  number doesn't match the latest ceremony, then they need to be recalculated
  before they are used or updated.  We keep the directions
  separate to improve statistical estimation of how accurate the rating is
  (just storing the net difference of 2 points isn't as meaningful as knowing
  you had 102 up and 100 down vs 3 up and 1 down), and use them as inputs to
  various different sorting algorithms.  Until someone redoes the statistical
  theory, we'll split meh points 50% to each of up and down.  But once we have
  better math, we can use meh directly.  When they have all faded away to close
  to zero (less than 0.01, equivalent to 3 years of fading one point) then the
  record can be garbage collected from the current database, freeing up
  storage.  Changed as needed.
d495 5
a499 5
award it rating points, but it never regenerates points (only Users
do that).  Attach content to it (like pictures or a post) to describe it better,
using LinkHomeContent.  Links to a classification group can rate it.  For
example, a book reviews group would have a link to the book to award it points.
Can be in multiple groups, such as "My Books" and "World's Best Books".
d501 1
a501 1
* Name of thing.
d597 1
a597 1
* award_number A count of the number of award ceremonies done up to and
d606 45
d1076 1
a1076 1
      t.integer :number1, default: 0, comment: "Generic number for counting things, or referencing other database tables, usage defined by subclasses."
d1084 1
d1097 1
a1097 1
      t.integer :number1, default: 0, comment: "Generic number for counting things, or referencing other database tables, usage defined by subclasses."
d1100 2
a1101 2
      t.boolean :approved_parent, default: false, comment: "True if the link to the parent object has been approved.  False means it's pending; the link record exists but it can’t be traversed (sort of like being deleted) until someone gives permission via LedgerApproved."
      t.boolean :approved_child, default: false, comment: "True if the link to the child object has been approved.  False means it's pending; the link record exists but it can’t be traversed (sort of like being deleted) until someone gives permission via LedgerApproved."
d1104 1
a1104 1
      t.float :rating_points_boost_parent, default: 0.0, comment: "The number of points used to boost the rating of the child object."
d1106 1
a1106 1
      t.integer :award_number, default: 0, comment: "The week's award number when this record was created, 0 if before time starts."
d1219 1
a1219 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.51 2021/01/04 17:22:42 agmsmith Exp agmsmith $
d1222 3
d1235 2
a1236 1
Make the default of is_latest_version true, since new records are usually latest.
d1260 2
a1261 1
Add a note about multipurpose class structure maybe better than separate object and links.
d1267 2
a1268 2
Group message moderators have special powers over LinkGroupContent
that links something to their group.
d1277 2
a1278 2
Put some of the exploratory explanations near the beginning, leaving
the class definitions at the end.
d1284 2
a1285 2
No GroupSettings_id field needed, separate table indexed by
id of the group instead.
d1291 2
a1292 3
Proof-reading pass.  Fix conceptual problem - no owners of links.
Also clarify who can delete links (if you need approval, you can
delete it too).
d1298 2
a1299 2
Work out Relationship class structure, write up a bit more
about relationships and the dimensions of symmetry and approval.
d1320 2
a1321 2
Rework approval vs deletion of records.  Now have separate child and parent
end of the link approval flags.  Delete is orthogonal to approval.
d1324 2
a1325 2
Rewording, also combine pending and deleted functionality into the
same thing (granting permission undeletes a record).
@


1.51
log
@Added LedgerThing and some LinkOpinion clarification.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.50 2020/09/20 23:45:52 agmsmith Exp agmsmith $</SMALL>
d389 1
a389 1
* current_up_points float Changed as needed.  Number of rating points in each
d392 3
a394 1
  ceremony) plus new ratings applied this week.  We keep the directions
d403 6
a408 1
  storage.
d654 1
a654 1
* approved_parent boolean
d689 2
a690 2
  the parent.
* rating_direction_child char
d694 4
a697 4
* award_number integer The week's award number when this record was created, 0
  if before any ceremonies have been done.  Lets us easily calculate the
  current faded value of the rating points.  This field can be recalculated by
  looking at this record's created_at date and cross referencing with all the
d1174 1
a1174 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.50 2020/09/20 23:45:52 agmsmith Exp agmsmith $
d1177 3
@


1.50
log
@Need to have a subject for posts, add a string for generic content classes.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.49 2020/09/13 20:48:36 agmsmith Exp agmsmith $</SMALL>
d459 2
a460 1
Idenfities a particular user.
d482 14
a495 1
employer.
d731 6
a736 6
Parent is a Ledger(Full/Sub)group and child is usually a LedgerPost.  That post
will be used as the home post (home page, status page, profile page, same thing)
for the group.  If there are several, the latest one will be used and the others
considered to be previous ones, visible if someone asks for the history of home
pages.  Or maybe we show them all, kind of like a list of announcements or
pinned posts.  Delete the LinkHomeContent to unpin them.
d909 6
a914 5
(usually a LedgerContent or a LedgerUser).  Can be positive or negative or meh,
decided by the points awarded to the child.  Usually no points awarded to the
parent, unless a third party is essentially paying someone to have an opinion.
Automatically approved for the child end, parent end auto approved if it is the
creator, and can only be deleted by the creator or parent end.
d945 15
a959 13
The main difference is that it is anonymous.  Usually members of a group will
on occasion (much more often if they have the meta-moderator role in the group)
be shown a random opinion about a message in the group (usually a recent one,
but not always).  They can decide how many points to award and in which
direction to the person making the opinion.  Additionally they will receive a
bit of a positive reward too, and for convenience the LinkMetaMod will be
initially approved on the parent end rather than needing the creator to be the
parent for pre-approval.  The group will pay for the points and be listed as
the creator of the LinkMetaMod record.  For meta-meta-moderation, we'll just
use an annual performance review for the more significant meta-moderators
(since they get paid in points, they could do this as a kind of job, and
moderators would also get points from the meta-moderator operation, and the
group could get points by having a weekly membership fee).
d1167 1
a1167 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.49 2020/09/13 20:48:36 agmsmith Exp agmsmith $
d1170 3
@


1.49
log
@Add note to is_latest_version as being useful in SQL queries too.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.48 2020/09/11 01:26:12 agmsmith Exp agmsmith $</SMALL>
d493 5
d1150 1
a1150 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.48 2020/09/11 01:26:12 agmsmith Exp agmsmith $
d1153 3
@


1.48
log
@Make the default of is_latest_version true, since new records are usually latest.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.47 2020/09/10 21:58:31 agmsmith Exp agmsmith $</SMALL>
d378 2
a379 1
  displaying only the latest versions in a list of posts.
d1000 1
a1000 1
      t.boolean :is_latest_version, default: true, comment: "True if the record is the latest version of the object.  False otherwise.  Caches the result of looking up the original object and seeing which record is the latest, so we have less overhead when displaying only the latest versions in a list of posts."
d1145 1
a1145 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.47 2020/09/10 21:58:31 agmsmith Exp agmsmith $
d1148 3
@


1.47
log
@Add change log to index.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.46 2020/09/10 21:57:02 agmsmith Exp agmsmith $</SMALL>
d999 1
a999 1
      t.boolean :is_latest_version, default: false, comment: "True if the record is the latest version of the object.  False otherwise.  Caches the result of looking up the original object and seeing which record is the latest, so we have less overhead when displaying only the latest versions in a list of posts."
d1144 1
a1144 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.46 2020/09/10 21:57:02 agmsmith Exp agmsmith $
d1147 3
@


1.46
log
@Add is_latest_version field, to optimise version checking.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.45 2020/08/06 22:53:07 agmsmith Exp agmsmith $</SMALL>
d1141 2
d1144 1
a1144 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.45 2020/08/06 22:53:07 agmsmith Exp agmsmith $
d1147 3
@


1.45
log
@Update database migration example with current version.
@
text
@d3 4
a6 1
<SMALL>$Id: Database\040Design.md,v 1.44 2020/08/05 20:42:14 agmsmith Exp agmsmith $</SMALL>
d375 4
d999 1
a1140 3
1. Table of Contents
{:toc}

d1142 1
a1142 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.44 2020/08/05 20:42:14 agmsmith Exp agmsmith $
d1145 3
@


1.44
log
@Added has_owners field to LedgerBase.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.43 2020/08/04 21:18:02 agmsmith Exp agmsmith $</SMALL>
d986 1
a986 1
    create_table :ledger_bases, force: false, comment: "Ledger objects base class and record.  Don't force: cascade deletes since this is a write-once ledger." do |t|
d988 5
d998 1
a998 4
      t.references :creator, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgercreator"}, comment: "Identifies the user who created this record."
      t.references :amended, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeramended"}, comment: "Points to the latest version of this record, or NULL if this is not the original record."
      t.boolean :deleted, default: false, comment: "True if there is a LedgerDelete record that is currently deleting this record, otherwise false (record is alive)."
      t.references :original, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeroriginal"}, comment: "Points to the original version of this record, or equal to id if this is the original one.  NULL if not initialised (should be a copy of the id of the record)."
a1001 1
      t.datetime :date1, null: true, comment: "Generic date and time from year 0 to year 9999, defined by subclasses."
d1011 3
a1015 3
      t.references :parent, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkparent"}, comment: "Points to the LedgerBase object (or subclass) which is usually the main one in the association."
      t.references :child, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkchild"}, comment: "Points to the LedgerBase object (or subclass) which is the child in the association."
      t.references :creator, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkcreator"}, comment: "Identifies the User who created this link."
d1040 1
a1040 1
    create_table :group_settings do |t|
d1043 1
a1043 1
      t.boolean :auto_approve_member_posts, default: false, comment: "True if posts attached to the group by a member are automatically approved (if they have enough points).  False means a moderator will need to approve them."
d1045 6
a1050 3
      t.float :min_points_non_member_post, default: 0.0, comment: "Minimum number of Up rating points needed when posting as a non-member to get automatic approval.  If they don't have enough, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :min_points_member_post, default: 0.0, comment: "Minimum number of Up rating points needed when posting as a member to get automatic approval.  If they don't have enough, their post will need to be approved by a moderator.  Ignored if automatic approval is turned off."
      t.float :min_points_membership, default: 0.0, comment: "Minimum number of Up rating points needed when applying to be a member to get automatic approval.  Ignored if automatic approval is turned off.  If they don't get automatically approved, a moderator will need to approve their request."
d1062 1
d1064 22
a1085 1
Flesh out link_base.rb with a few associations too:
a1086 1
<PRE>
d1091 3
d1137 1
a1137 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.43 2020/08/04 21:18:02 agmsmith Exp agmsmith $
d1140 3
@


1.43
log
@Add LinkHomeGroup, for user's home page.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.42 2020/08/02 20:46:02 agmsmith Exp agmsmith $</SMALL>
a342 7
* creator_id Identifies the user who created this record.  Store the id of the
  original version of the user's LedgerUser record.  The root object is
  considered to have created itself.  If you want to change the creator of an
  object, you have to make a new version of the record with the new creator.
  Conceptually there is a LinkCreator record that links the object to the
  creator, with zero reference points allocated.  To cut down on such a common
  record, it's implied by the creator_id field.  Write-once.
d368 11
d1109 1
a1109 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.42 2020/08/02 20:46:02 agmsmith Exp agmsmith $
d1112 3
@


1.42
log
@Move class structure retrospective regrets to later in the introduction.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.41 2020/07/15 20:46:09 agmsmith Exp agmsmith $</SMALL>
d524 1
a524 1
There's an optional home post (see LinkHomePost) that describes the group in
d698 1
a698 9
### *LinkHomePost* < LinkBase

Parent is a LedgerUser or Ledger(Full/Sub)group and child is usually a
LedgerPost.  That post will be used as the home post (home page, status page,
profile page, same thing) for the person or the group.  If there are several,
the latest one will be used and the others considered to be previous ones,
visible if someone asks for the history of home pages.  Or maybe we show them
all, kind of like a list of announcements or pinned posts.  Delete the
LinkHomePost to unpin them.
d700 16
d1105 1
a1105 1
$Header: /home/agmsmith/Programming/RatingStone/docs/RCS/Database\040Design.md,v 1.41 2020/07/15 20:46:09 agmsmith Exp agmsmith $
d1108 3
@


1.41
log
@amended_id now used in later versions to detect race conditions.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.40 2020/07/15 01:21:50 agmsmith Exp agmsmith $</SMALL>
a52 8
Though in retrospect it may be simpler with a class structure based on a single
multipurpose object.  Currently we have records for linking things together
(such as linking a user and a thing together with a rating to say that that
user has an opinion about that thing) and object records representing things
(posts, pictures, etc).  A multipurpose object design would make it simpler to
have an opinion about an opinion, which is needed for meta-moderation.  And we
need meta-moderation to keep the quality of opinions up.

d89 11
d1097 1
a1097 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.40 2020/07/15 01:21:50 agmsmith Exp agmsmith $
d1100 3
@


1.40
log
@Add a note about multipurpose class structure maybe better than separate object and links.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.39 2020/07/14 00:22:05 agmsmith Exp agmsmith $</SMALL>
d358 9
a366 4
* amended_id Points to the latest version of this record, or NULL if this is
  not the original record.  Usually we delete or undelete all versions of an
  object, but if we ever delete/undelete just some versions, this will point to
  the latest not deleted version.  Changed as needed.
d1094 1
a1094 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.39 2020/07/14 00:22:05 agmsmith Exp agmsmith $
d1097 3
@


1.39
log
@Better wording.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.38 2020/07/14 00:17:38 agmsmith Exp agmsmith $</SMALL>
d53 8
d1089 1
a1089 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.38 2020/07/14 00:17:38 agmsmith Exp agmsmith $
d1092 3
@


1.38
log
@Group message moderators have special powers over LinkGroupContent
that links something to their group.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.37 2020/07/12 01:00:19 agmsmith Exp agmsmith $</SMALL>
d726 5
a730 3
Unlike most Links, group message moderators can change the approval of this
link (since it's trying to connect to their group).  As well, they can also
delete this link (to get it out of their pending things to moderate list).
d1081 1
a1081 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.37 2020/07/12 01:00:19 agmsmith Exp agmsmith $
d1084 4
@


1.37
log
@Both ends of the link need to be approved before points awarded.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.36 2020/07/10 19:35:35 agmsmith Exp agmsmith $</SMALL>
d726 4
d1079 1
a1079 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.36 2020/07/10 19:35:35 agmsmith Exp agmsmith $
d1082 3
@


1.36
log
@Mention that the original version's id number is stored in various records.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.35 2020/07/07 21:35:52 agmsmith Exp agmsmith $</SMALL>
d604 1
a604 1
  parent or child aren't awarded until that end of the link has been approved.
d661 1
a661 1
Only the creator or an existing owner can add new owners to an object.
d1075 1
a1075 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.35 2020/07/07 21:35:52 agmsmith Exp agmsmith $
d1078 3
@


1.35
log
@Put some of the exploratory explanations near the beginning, leaving
the class definitions at the end.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.34 2020/07/07 20:51:57 agmsmith Exp agmsmith $</SMALL>
d332 2
a333 1
* creator_id Identifies the user who created this record.  The root object is
d436 3
a438 3
* Elsewhere, the user is referenced by the record id number of the LedgerUser
  record.  Though for export or federated systems we'd need a GUID or an
  id+server pair.
d584 2
a585 1
  original post is parent, reply to it is child).  Never NULL.  Write-once.
d588 4
a591 3
  header record, child_id is something in the list).  Never NULL.  Write-once.
* creator_id Identifies the LedgerUser who created this link.  Never NULL.
  Write-once.
d1075 1
a1075 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.34 2020/07/07 20:51:57 agmsmith Exp agmsmith $
d1078 4
@


1.34
log
@Added meta-moderation idea from a discussion on Slashdot.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.33 2020/07/04 16:58:42 agmsmith Exp agmsmith $</SMALL>
d90 226
a918 229
## Permissions Role Model

The main worry is about posts.  The system needs to decide who can read a post,
who is allowed to reply, who can add a post to a private discussion group, who
can delete it and so on.  We'll worry about other permissions later.  After
considering access control lists and even [UNIX style
permissions](https://en.wikipedia.org/wiki/File_system_permissions#Traditional_Unix_permissions)
I decided that every post should be in a group or several groups.  The group
decides many of those things mainly by having a membership list.  Even a
person's blog would be a group.  Perhaps private direct communictions could be
a group too, with just the two people in the conversation being group members.

The next big insight was to use permission roles.  They can be put in a rough
order where one more permissive role includes the things allowed in the lower
less permissive roles, to save on having to grant each permission individually.
In practice, each role is granted by linking the user to a group with a record
that specifies the highest role they have.

1. **Banned**.  Can't access the group or posts.
2. **Reader**.  Can read posts and see the group description.
3. **Member**.  Can see more group information, like membership lists.  Some
   groups also automatically approve posts by members.  Others require approval
   by a moderator.  By the way, there's no permission needed to request that a
   post be added to a group, so even a non-member could do that.
4. **Message Moderator**.  Can approve, unapprove (makes it pending approval
   again) and disconnect posts from the group.
5. **Meta Moderator**.  Can make anonymous comments on opinions about messages
   in the group.
6. **Member Moderator**.  Approves and rejects membership requests.
7. **Owner**.  Owners can be added to a group (and other objects) by a
   LinkOwner record.  They have all permissions (including approving or
   deleting owners and moderators), except they can't change the creator.
8. **Creator**.  Has all permissions to modify the object, including changing
   the creator.

We'll use ten times the list row numbers here as the role priority, in case we
later want to add new roles in-between.

When finding out if a user has a permission for an action allowed by a certain
role, check for a match with the creator first (everything is allowed).  Then
see if they are in the Banned role second: permission is denied (if you want to
explicitly deny a user access to the group, give them the Banned role).  Then
start searching at the most permissive role after Creator and work down to the
lowest level that matches the role query.  If they were not found in the search
then they don't have permission for the role.  In practice, we'll first look
for some LinkBase subclass record that specifies roles and sort by role
priority.  Then try the more computationally expensive wildcards for each role.

The group would have a few settings related to those roles (stored in a
separate database table rather than directly in the LedgerFullGroup record):

* Posts by non-members automatically approved?  Could lead to rowdy
  discussions, though the requirement to spend points to talk hopefully will
  make people think before posting.
* Posts by members automatically approved?  Avoids most of the need for message
  moderators (might still need moderators to delete posts).
* Membership requests automatically approved?  Good for public bulletin boards.
* We can do interesting things with the reputation points the user gave the
  group when adding their post to the group.  Maybe require a minimum number of
  points to have the post automatically accepted.  Perhaps have a discount for
  members.  If the user didn't spend enough points on making the link to the
  group, the link stays pending, waiting for a moderator to approve it or
  delete it (wasting the user's points).
* There could be a weekly membership fee, which would go to the group.
* Reward the moderators by reimbursing their point usage from the group's
  supply of points.  Possibly give them a bit extra, which could provide
  incentive to moderate and meta-moderate.
* Beside the explicit links to the group to identify members and other kinds of
  users, also have relationship wildcards to specify users for each role.
  They're usually relative to the owners & creator of the group.  Includes
  concepts like Everybody, Friends of the owners, Friends of Friends of the
  owners, Parents of Parents, Enemies of Friends and so on.  We need a little
  language to specify users, using relationships declared elsewhere (Friend,
  Sibling, Spouse and so on links).  Could use up too much database time
  resulting in a terminated web session, so maybe warn people when they set
  wildcards that could potentially select from too many people (count up how
  many friends of enemies the owners have, before saving the new wildcard in
  case of termination).
* Generic Internet users (people not logged in) allowed as readers?  Done by
  having a special Internet user for non-logged-in people which you can assign
  to the Reader role, or to the Banned role or just leave out.
* Allow anyone to be a Reader?  If enabled, lets anyone read messages.  Also
  no need for storage for the list of Readers.  Done by adding the Everybody
  wildcard to the Reader role.


### Wildcard Language

To identify a group of people by wildcards, we can make up a little language.
We want to have expressions that say:

* Everybody.
* A particular person.
* Friends of someone.
* Members (and all the other roles, such as moderators, owners) of a group.

Perhaps a functional language like:

* "99" the LedgerUser record number for a particular person.
* "*" for everybody.
* "Friend()" for all friends of the contents.  Other relationships can be used
  as well as Friends.  Some are asymetric so we need to know paired words such
  as "Parent" and "Child" and that they refer to opposite ends of the same
  relationship record.
* "Banned", "Readers", "Members", "MessageMods", "MemberMods", "Owners",
  "Creator" specifies all the people who are explicit members (have a LinkRole
  record for the group) in that role or higher (Members includes up to
  Creator etc).
* Plus "+" to concatenate wildcards.
* Round brackets for grouping order of operations.

So you could have "Friend(Members)+Members" for friends of all members and the
members too.  An empty string would mean nobody.


## About Posts and Groups

When someone writes a post, they create both a LedgerPost object with the text
and a link object (LinkGroupContent) to connect it to the group it is in.  If
they want it to be in multiple groups, they can just add more links.  If it's a
reply to some other post, they add a link (LinkReply) to that post too.  It's a
bit awkward and expensive in ratings points (each link needs points) having
both a link to the reply and a link to the group, but both are needed.  We
can't default to the group based on the group the previous message is in, since
later on someone could add that previous post to some other group and your post
would suddenly be visible to people you hadn't expected.  Also this discourages
the evil of unnecessary cross-posting.

The links also award points to both the post and the group (the user decides
how much to spend and how to split it), so that posts using the group
contribute a bit to its upkeep.  The group owners can spend the group points on
the group's behalf, perhaps reimbursing moderators for the points they use
while doing their work (creating approval and deletion objects takes points).
Of course, if the group's points fall to zero, it can be garbage collected.
Same for posts that aren't referenced much.

I'd like to have small points awarded for just reading a post, but that won't
be practical since it would blow up the database size tremendously (each read
would create a LinkBase record).  Or maybe we could have a daily "tip" or
donation operation that awards points to the list of posts the user read that
day, and a variation of LinkBase that uses AuxLedger records to specify a bunch
of posts to get a reward.  Though that would make the backtracking from the
post to donors awkward (not just looking for a connected LinkBase object) when
doing awards ceremonies.  So for now, you can "like" or maybe "cast a stone"
for individual posts and award points manually.

So, what happens if you make a post that isn't in a group?  People can still
find it by looking at the creator's profile for all the posts they have
written.  There are no groups to allow people to read it, so it has a default
permission role of Banned for everyone except the creator or owners (if the
user attaches extra owners to the post).  An alternative for ungrouped posts is
to make them readable by everybody, including anonymous Internet users so
search engines will pick them up.  Which to choose?  A default of Banned would
force users to spend extra points to make their post readable in some group.  A
default of overly public would encourage more public discussion.  I'm going to
make them public, since we still require spending typically 1.0 reputation
points to create an ungrouped reply.  It costs twice as much (or you could make
do with a shorter message life) to make it a reply in a private discussion,
since you have the group link(s) to add as well as the reply link.  People will
still use groups since it's worthwhile to reach a more relevant audience.


## Relationships

We want to identify people based on relationships.  The obvious one used by
many social media is Friend.  Another is Follower.  We can also do Parent,
Child, Spouse and that should about cover it for family relationships
(grandparents are Parent of Parent of person, siblings share a parent, etc).
We might want to add variations of friendship like boyfriend/girlfriend, work
related acquaintance, divorced and so on but preferably without the extra
complication of gender.  Possibly besides birthday records, we'll need death
date records so a spouse is a widower when the other spouse is dead, but they
go back to being married when they are both dead (they're always married, but
we're showing what is important to their audience).

After discarding some earlier ideas on relationship implementation, it seems
there are a two orthogonal properties of relationships we have to worry about
for searching and security purposes: Symmetry and approval.  All relationships
will be represented in our database by a LinkBase subclass record listing two
people (parent and child fields, though that usually isn't the actual meaning)
and how they're connected.


### Symmetry Dimension

Bidirectional or equal or symmetric relationships are like Friend where both
ends of the relationship are an indistinguishable "Friend".  Same for Spouse.
But Parent/Child is a pair that has distinctly different ends.  So is
Follower/Leader, or Employer/Employee.  Those we'll call asymmetric.

The main complication is that we have to search differently depending on the
symmetry.  If we're looking for friends of person X, we have to search for all
Friend records that have X in the parent_id as well as all Friend records that
have X as the child_id.  If we're looking for all parents of X, we have to
search the Parent/Child records which have X as the child.  If we're looking
for all children of X, we have to search the same kind of parent/child records,
but look for ones where the parent field is X.

So, the search technique changes and we need to know that Parent/Child searches
look for the same type of record but search different fields.


### Approval Dimension

The other dimension is approval.  Sometimes we need approval from both parties
to create the link; each approves their end using a LedgerApprove record.
Other times we have a one way relationship, such as a fan of a movie star, and
only the fan end needs approval (and that's usually automatic).

One side effect of approval is that the reputation points assigned to the link
only get counted when the link is fully approved.  That gives incentive to do
approvals, and opens the door to third party suggested relationships (be a fan
of this brand and you get some points).  Of course, instead of approving, you
can delete the link, and the points spent on making the link are wasted.

Partially approved relationships are still useful.  If only one end is
approved, then for example instead of Friends we have admirer (the approved
end) and admiree (the unapproved one).  Or if both ends haven't been approved,
we have a suggested friendship (maybe a third party created the relationship
record).  One-way relationships still need approval of the originating end, the
fan implicitly approves the relationship record when they create it for
themselves.  If someone else created it, then it still needs the originating
end approved by the fan.  The movie star end is automatically approved.
Otherwise fans and haters would have their one way relationship rebuffed; a
particular problem for awarding down points.  No, the movie star or villain
can't delete one way relationships; like fleas they stick around for a while
and annoy.


d1072 1
a1072 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.33 2020/07/04 16:58:42 agmsmith Exp agmsmith $
d1075 3
@


1.33
log
@No GroupSettings_id field needed, separate table indexed by
id of the group instead.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.32 2020/06/30 20:51:44 agmsmith Exp agmsmith $</SMALL>
d625 16
d643 24
d719 4
a722 2
5. **Member Moderator**.  Approves and rejects membership requests.
6. **Owner**.  Owners can be added to a group (and other objects) by a
d725 1
a725 1
7. **Creator**.  Has all permissions to modify the object, including changing
d756 4
d1016 2
a1017 1
      t.string :wildcard_role_message_moderator, default: "", comment: "Relationship expression specifying additional people who are allowed to moderate messages."
d1075 1
a1075 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.32 2020/06/30 20:51:44 agmsmith Exp agmsmith $
d1078 4
@


1.32
log
@Added database setup for GroupSettings table.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.31 2020/06/30 00:24:46 agmsmith Exp agmsmith $</SMALL>
d302 3
a304 3
* group_settings_id integer A reference to a separate GroupSettings database
  table that contains more information about the group, such as whether posts
  need to be approved by moderators.
d1028 1
a1028 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.31 2020/06/30 00:24:46 agmsmith Exp agmsmith $
d1031 3
@


1.31
log
@Proof-reading pass.  Fix conceptual problem - no owners of links.
Also clarify who can delete links (if you need approval, you can
delete it too).
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.30 2020/06/29 20:27:42 agmsmith Exp agmsmith $</SMALL>
d958 15
d1028 1
a1028 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.30 2020/06/29 20:27:42 agmsmith Exp agmsmith $
d1031 5
@


1.30
log
@Nope, not owners, else you could get someone to preapprove a relationship.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.29 2020/06/29 15:43:14 agmsmith Exp agmsmith $</SMALL>
d7 12
a18 12
Because I'm planning that someone could implement the reputation system as a
BlockChain ledger application, or as a federated collection of systems
exchanging records, the database is set up as a write once collection of object
records and link records.  Objects are the things the user can view and which
have ratings (posted messages, lists of things, other users).  Links implement
lists of things, connecting a pair of objects together, one being a parent or
container object (such as a list of book reviews) and the other being a child
object in that container (such as a book review object).  Usually rating points
are also transfered when you create a link (perhaps describing how much you
like that book review).  I'm using separate link records rather than parent
references in the objects so that an object can have multiple parents (useful
for filing something under multiple categories).
d117 1
a117 1
  (unless the user is looking for a specific version the object).  Had
d163 2
d183 7
a189 6
rating points for things like spam replies to your post or spam posts to a
group, you can specify multiple links with many AuxLink records.  Used for
things like approving a request to join a group (the request is a LinkBase
subclass record joining the person to the group).  Both child and parent
approvals are given, determined by whether you have the rights to do that.  To
reject permission, delete the unapproved link with LedgerDelete.
d212 7
a218 3
* Points gained per week cached value.  Computed by considering various award
  records (such as e-mail verified, passport photo uploaded, had tea with the
  sysop, bought some bonus points) attached to the LedgerUser record by links.
d225 2
a226 1
web site.  As well, employees can list the LedgerCompany as their employer.
d243 2
a244 2
a grid, in order by link creation date.  This is the object the user interacts
with the most.
d259 1
a259 1
file.
d274 6
a279 5
LinkSubgroup records specify the hierarchy of subgroups (actually a cyclic
directed graph), by linking parent group to child group.  Multiple parents are
allowed, so a photo taken in Canada in July 2020 could be filed both in a
subgroup for North America and a subgroup for Year 2020.  You could even make
subgroups for each family member and classify the photos by who is in them.
d283 1
a283 1
group appended to it.
d286 3
a288 2
operations; that's delegated to the LedgerGroup(s) which control this subgroup
by LinkGroupRoleDelegation records.
d294 1
a294 1
#### *LedgerGroup* < LedgerSubgroup
d299 2
a300 2
delegate their permission determination to this LedgerGroup and its membership
lists by a LinkGroupRoleDelegation record.
d336 8
d386 4
a389 3
  the link could just be deleted if you want to reject it completely.  Combined
  with the deleted boolean, a record is normally only seen if it is both fully
  approved and not deleted.  Changed as needed.
d432 5
d455 7
a461 5
Parent is a LedgerUser or Ledger(Sub)group and child is usually a LedgerPost.
That post will be used as the home post (home page, status page, profile page,
same thing) for the person or the group.  If there are several, the latest one
will be used and the others considered to be previous ones, visible if someone
asks for the history of home pages.
d466 2
a467 2
Specifies the role a person has in a group.  Parent is the LedgerGroup, child
is the LedgerUser.
d479 4
a482 4
Specifies that the parent LedgerGroup is used for permission checks for users
trying to access the child LedgerSubgroup.  If there is more than one of these
records, they're all checked until one of them gives permission or all of them
deny permission.
d487 4
a490 4
Links a child object (usually a LedgerPost or LedgerMedia) to a parent
LedgerGroup or LedgerSubgroup.  Means that the child is considered part of the
group's displayable content and will use the group's permissions to decide who
can see the child.  Quite often the links will be pending until each end is
d493 1
a493 1
the same group also have a LinkGroupContent record, since group inclusion can
d506 2
a507 2
Specifies that the child LedgerSubgroup or LedgerGroup is subordinate to the
parent LedgerGroup or LedgerSubgroup.  Used for making a directed graph
d510 2
a511 1
smaller chunks.
d516 3
a518 3
The abstract base class to show the parent and child are LedgerUser objects in
some sort of relationship, such as parent, child, spouse, friend, enemy,
employer, follower.
d520 1
a520 2
Only the creator and owners can delete it.  Really trusting friends will make
the other friend an owner of the relationship link too.
d527 6
a532 6
All ends of the link which are the same as the creator (but not owners) are
automatically approved.  Other ends will be in a pending state until the
refered person uses a LedgerApprove to approve their end.  Where you can
approve, you can also unapprove your end of the relationship.  Until both are
approved, it's a partial relationship (admirer rather than friends) and not
usually shown to users or used for finding related people.
d549 4
a552 1
specified person, such as Friends(x).
d573 2
a574 1
or leader in the child field).
d605 1
a605 1
Parent is the employer pr company employing the child.  Both ends need to be
d611 3
a613 3
Parent LinkUser is a fan or at least interested in the child.  If you like the
child LedgerUser, send some positive points, negative if you hate them.  They
receive those points either way.
d618 1
a618 1
Parent LinkUser (usually the creator) has an opinion about the child object
d623 1
a623 1
creator, and can only be deleted by the creator/owners or parent end.
d678 1
a678 1
   again) and delete posts.
d691 1
a691 1
see if they are in the Banned role second; permission is denied (if you want to
d700 1
a700 1
separate database table rather than directly in the LedgerGroup record):
d744 1
d866 1
a866 1
record).  One way relationships still need approval of the originating end, the
d870 1
a870 1
Otherwise fans and haters could get their one way relationship rebuffed; a
d872 2
a873 1
can't delete one way relationships; like fleas they stick around for a while.
d1013 1
a1013 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.29 2020/06/29 15:43:14 agmsmith Exp agmsmith $
d1016 3
@


1.29
log
@Work out Relationship class structure, write up a bit more
about relationships and the dimensions of symmetry and approval.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.28 2020/06/29 01:01:00 agmsmith Exp agmsmith $</SMALL>
d501 1
a501 1
All ends of the link which are the same as the creator or owners are
d981 1
a981 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.28 2020/06/29 01:01:00 agmsmith Exp agmsmith $
d984 4
@


1.28
log
@Added relationships section.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.27 2020/06/27 21:30:08 agmsmith Exp agmsmith $</SMALL>
d489 18
a506 1
Rethink this area, unidirectional vs bidirectional, preapproved, etc.
d508 2
a509 11
The abstract base class to show the parent and child are LederUser objects in
some sort of relationship, such as parent, child, spouse, friend, enemy.
Relationships can be equal and bidirectional, such as between spouses or
between friends.  For searching efficiency, we'll just arbitrarily make the
older user (lower ID number) the parent in bidirectional links.  Others have an
order where parent and child ends of the relationship are different (such as
real world parent and child).  Many require both ends to be approved by the
parties (auto-approve the ends which are the creator).  Until both are
approved, it's a partial relationship (admirer rather than friends).  Some
always one way relationships, such as follower, don't require approval of the
child end, and can't be deleted by the child end.
d515 33
a547 1
#### *LinkFriend* < LinkRelationship
d556 1
a556 1
#### *LinkEnemy* < LinkRelationship
d559 2
a560 1
LinkFriend.  Real enemies will give and accept negative points.
d563 1
a563 1
#### *LinkParent* < LinkRelationship
d565 1
a565 1
Parent is parent in real life of child.  Both ends need to be approved.
d568 1
a568 1
#### *LinkSpouse* < LinkRelationship
d570 1
a570 1
Parent is a spouse of child.  Bidirectional.  Both ends need to be approved.
d573 1
a573 1
#### *LinkEmployer* < LinkRelationship
d575 2
a576 2
Parent is the employee, child is the company employing them.  Both ends need to
be approved.  Otherwise you'll see something like "claims to be employed by X".
d579 1
a579 1
#### *LinkFollower* < LinkRelationship
d581 3
a583 7
Parent LinkUser is interested in the child LinkUser's posts in general.  They
could also subscribe to the child user's personal group(s).  But this will
include all posts parent is allowed to read from that child user in their feed.

Automatic approval for the child end.  Can only be deleted by the creator or
parent.  If you like the child LedgerUser, send some positive points, negative
if you hate them.
d593 1
a593 1
creator, and can only be deleted by the creator or parent end.
d784 6
a789 3
We might want to add variations of friendship like boyfriend/girlfriend,
divorced and so on but without the gender.  Possibly we'll need death so a
spouse is a widower when the other spouse is dead.
d791 2
a792 1
There are a two orthogonal properties of relationships we have to worry about
d794 6
a799 2
will be represented in our database by a LinkBase record listing two people and
how they're connected.
d802 17
a818 3
ends of the relationship are indistinguishable "Friend".  Same for Spouse.  But
Parent/Child is a pair that has distinctly different ends.  So is
Follower/Leader.  Those we'll call asymmetric.
d821 3
a823 10
to create the link; each approves their end using a LedgerApprove.  Other times
we have a one way relationship, such as a fan of a movie star.  Partially
approved relationships are still useful.  If only one end is approved, then for
example instead of Friends we have admirer (the approved end) and admiree (the
unapproved one).  Or if both ends haven't been approved, we have a suggested
friendship (maybe a third party created the relationship record).  One way
relationships still need approval of the originating end, the fan implicitly
approves the relationship record when they create it for themselves.  If
someone else created it, then it still needs the originating end approved by
the fan.
d828 1
a828 1
of this brand and you get some points).  Of course, instead of approving you
d831 12
d981 1
a981 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.27 2020/06/27 21:30:08 agmsmith Exp agmsmith $
d984 3
@


1.27
log
@Proof reading.  Added Subgroups.  Wildcard language.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.26 2020/06/26 00:37:21 agmsmith Exp agmsmith $</SMALL>
d741 39
d913 3
d917 1
a917 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.26 2020/06/26 00:37:21 agmsmith Exp agmsmith $
d920 3
@


1.26
log
@Added LinkRelationship, removed LinkPermission.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.25 2020/06/25 00:06:50 agmsmith Exp agmsmith $</SMALL>
d7 1
a7 1
Because I'm thinking that someone could implement the reputation system as a
d17 2
a18 2
pointers in the objects so that an object can have multiple parents (useful for
filing something in multiple categories).
d26 1
a26 1
references (links) to the text (such as replies) will still point at the
d41 1
a41 1
point out the record with the latest change.
d92 5
a96 2
The base class for persistent objects that the user may interact with.  There
is one database table for all objects of this class and subclasses.
d109 3
a111 1
  Write-once.
d121 2
a122 1
  brief time when it is NULL, could cause bugs).  Happens to be write-once.
d185 2
a186 3
approvals are given as appropriate, determined by whether you have the rights
to do that.  To reject permission, delete the unapproved link with
LedgerDelete.  If you change your mind, you can undelete the unapproved link.
d214 18
a231 1
### *LedgerPost* < LedgerBase
d234 3
a236 6
pictures and other media files (displayed in a grid, in order by link creation
date).  There can also be post replies, the post can be placed in a category
list to identify what the topic of the text is, have rating points awarded to
it, and so on.  This is the object the user interacts with the most.  It is
also usually visible to users and even external web sites, unless permissions
make it private.
d244 1
a244 1
### *LedgerMedia* < LedgerBase
d258 39
d328 4
a331 4
The base class for links of all kinds between pairs of objects.  There is one
database table for all instances of this class and subclasses.  The particular
subclass identifies what the link's purpose is (object A owns object B, object
A is a list header and B is in the list, etc).
d335 1
a335 1
  and LedgerGivePermission.  Write-once.
d405 7
a411 7
some other LinkBase record (such as a LinkReply or LinkGroup).  That's because
the implied LinkCreator (the creator_id field in the LedgerBase record) has
zero reputation points assigned to it.  If we just created the object, at the
next awards ceremony it would have zero points and be garbage collected.  Also
by using a LinkOwner, rather than having an implied LinkCreator with a fixed
1.0 fee, we can charge a larger and variable fee for more resource consuming
objects, such as big media files.
d416 2
a417 1
The child is a reply to the parent.  Usually both objects are LedgerPost.
d429 29
a457 1
### *LinkGroup* < LinkBase
d459 26
a484 9
Links a child object (usually a LedgerPost) to a parent LedgerGroup.  Means
that the child is considered part of the group's displayable content and will
use the group's permissions to decide who can see the child.  Quite often the
links will be pending until each end is approved by a moderator or higher role
(usually moderator at the group end, owner/creator at the post end).  Note that
all replies to a post that are in the same group also have a LinkGroup record,
since group inclusion can change from post to post as the users wish (user
interface defaults to using the same groups as the original post when
replying).
d489 2
d552 1
a552 1
(usually a LedgerPost or a LedgerUser).  Can be positive or negative or meh,
d566 3
a568 3
This database table and class is used for connecting LedgerBase records
(a LedgerDelete/Undelete or LedgerGivePermission) and LinkBase records.  Used
for deleting, undeleting, and giving permission to a LinkBase record.  The main
d613 3
a615 3
6. **Owner**.  Owners can be added to a group (and other objects).  They have
   all permissions (including approving or deleting owners and moderators),
   except they can't change the creator.
d619 3
d632 2
a633 1
The group would have a few settings related to those roles:
d640 1
a640 1
* Membership requests automatically approved?  Not sure if this is a good idea.
d647 11
a657 11
* Beside the explicit links to the group to identify members, readers, etc,
  have relationship wildcards to specify users for each role.  They're usually
  relative to the owners & creator of the group.  Includes concepts like
  Everybody, Friends of the owners, Friends of Friends of the owners, Parents
  of Parents, Enemies of Friends and so on.  We need a little language to
  specify users, using relationships declared elsewhere (Friend, Sibling,
  Spouse and so on links).  Could use up too much database time resulting in a
  terminated web session, so maybe warn people when they set wildcards that
  could potentially select from too many people (count up how many friends of
  enemies the owners have, before saving the new wildcard in case of
  termination).
d665 29
d697 1
a697 1
and a link object (LinkGroupHasPost?) to connect it to the group it is in.  If
d699 7
a705 7
reply to some other post, they add a link (LinkPostHasReply?) to that post too.
It's a bit awkward and expensive in ratings points (each link needs points)
having both a link to the reply and a link to the group, but both are needed.
We can't default to the group based on the group the previous message is in,
since later on someone could add that previous post to some other group and
your post would suddenly be visible to people you hadn't expected.  Also this
discourages the evil of unnecessary or accidental cross-posting.
a739 6
WIP:

Subgroups for categories.

Moderators spending rating points - reimburse from group?

d774 1
a774 1
      t.integer :number1, default: 0, comment: "Generic number for counting things, defined by subclasses."
d795 2
d811 3
d875 1
a875 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.25 2020/06/25 00:06:50 agmsmith Exp agmsmith $
d878 3
@


1.25
log
@Decide on making ungrouped posts public.  Add LinkOwner record.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.24 2020/06/24 11:18:49 agmsmith Exp agmsmith $</SMALL>
d280 2
a281 1
  main one in the association.  Never NULL.  Write-once.
d298 15
a312 14
  (sort of like being deleted) until both ends have been approved.  The typical
  use case will be someone posting a message to a discussion group by adding a
  link between their post and the group.  The approved_child end (assuming the
  post is the child) is set to true when it is created since the link creator
  is the same as the post's creator.  If the group's permission for that user
  allows auto-approval (such as a post by the creator of the group), the link
  is created with the approved_parent flag is set to true.  If approval isn't
  automatic, then the new link is considered to be pending and the flag(s)
  start out false.  Later on someone with appropriate permissions (usually a
  group moderator) can approve the pending post link by using a LedgerApprove
  record.  Approval can be revoked by using LedgerUnapprove, or the link could
  just be deleted if you want to reject it completely.  Combined with the
  deleted boolean, a record is normally only seen if it is both fully approved
  and not deleted.  Changed as needed.
d383 1
a383 1
### *LinkPermission* < LinkBase
d385 69
a453 21
The parent is some LedgerObject, the child is some other LedgerObject that is
being granted permissions to access the parent.  Stock permissions are stored
in the LedgerObject itself (friends, owners, friends of friends, public, etc)
but for unusual special case objects being granted permission (like a
discussion group or a specific user), a LinkPermission is needed.  If there are
several LinkPermission records for the same parent/child object pair, they are
run through in reverse date of link creation (newest permission examined first)
until a permission decision is made.  The type of the permission granted is
specified by the link's subclass.  No permission check is needed to specify the
child of LinkPermission; you just need points and ownership rights to the
parent object to be able to creat a LinkPermission from your own object to any
LedgerUser object.

Possible subclasses are:

* LinkPermissionDeny - Target is not allowed to access the parent object.
* LinkPermissionView - Target can view the parent object.
* LinkPermissionReply - Target can link a new post object to the parent
  object as a reply.
* LinkPermissionWrite - Target can change the parent object (make new version).
* LinkPermissionOwner - Target has ownership permissions for the parent object.
d737 1
a737 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.24 2020/06/24 11:18:49 agmsmith Exp agmsmith $
d740 3
@


1.24
log
@More work in progress on permission roles and discussion groups.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.23 2020/06/21 00:20:58 agmsmith Exp agmsmith $</SMALL>
d328 4
a331 3
* rating_direction char How the points from the creator are applied to the
  child and parent objects (both are in the same direction we assume), can be
  "U" for up, "D" for down or "M" for meh.  Write-once.
d341 12
a352 3
The child is a LedgerUser who is to be treated almost the same as the creator
of the object specified as the parent of the link.  They can do everything the
creator can do, except change the creator.
d368 13
d527 8
a534 8
be done since it would blow up the database size tremendously (each read would
create a LinkBase record).  Or maybe we could have a daily "tip" or donation
operation that awards points to the list of posts the user read that day, and a
variation of LinkBase that uses AuxLedger records to specify a bunch of posts
to get a reward.  Though that would make the backtracking from the post to
donors awkward (not just looking for a connected LinkBase object) when doing
awards ceremonies.  So for now, you can "like" or maybe "cast a stone" for
individual posts and award points manually.
d537 13
a549 14
find it by looking at your profile for all the posts you have written.  But it
doesn't have any links to it (other than the implied creator one) so it has
zero reputation points and can be garbage collected at the next awards
ceremony.  Maybe we should require the implied spending of a single reputation point to create
anything, so the implied link to the creator has a bit of permanence.  Also,
there are no groups to allow people to read it, so it has a default permission
role of Banned for everyone except the creator or owners (if the user attaches
extra owners to the post).

stand alone posts.
Points given to reply and group.

Assiging a post to a group or multiple groups.

d687 1
a687 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.23 2020/06/21 00:20:58 agmsmith Exp agmsmith $
d690 3
@


1.23
log
@Working on the Permissions Model.  Idea of Groups for all posts, roles.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.22 2020/06/20 17:14:23 agmsmith Exp agmsmith $</SMALL>
d338 6
d407 1
a407 1
## Permissions Model
d425 1
a425 1
1. **Nothing**.  Can't access the group or posts.
d440 9
a448 7
When searching roles to find out if a user has a permission for an action
allowed by a certain role, check the Nothing role first to see if permission is
denied (if you want to explicitly deny a user access to the group, give them
the Nothing role), then start searching at the most permissive (Creator) and
work down to the lowest level that matches the role query.  If they were
Nothing or not found in the search then they don't have permission for the
role.
d452 3
d458 17
a474 6
* Beside the explicit links to the group, have relationship wildcards to
  specify users for each role.  They're usually relative to the owners +
  creator of the group.  Includes concepts like Everybody, Friends of the
  owners, Friends of Friends of the owners, Parents of Parents, Enemies of
  Friends and so on.  We need a little language to specify users, using
  relationships declared elsewhere (Friend, Sibling, Spouse and so on links).
d477 1
a477 1
  to the Reader role, or to the Nothing role (or just leave out).
d482 47
a532 2
Assiging a post to a group or multiple groups.

d665 1
a665 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.22 2020/06/20 17:14:23 agmsmith Exp agmsmith $
d668 3
@


1.22
log
@Rework approval vs deletion of records.  Now have separate child and parent
end of the link approval flags.  Delete is orthogonal to approval.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.21 2020/06/15 15:56:25 agmsmith Exp agmsmith $</SMALL>
d90 1
a90 1
## *LedgerBase*
d164 1
a164 1
### *LedgerUndelete* < LedgerDelete
d187 1
a187 1
### *LedgerUnapprove* < LedgerApprove
d268 1
a268 1
## *LinkBase*
d377 3
a379 1
## *AuxLink*
d391 1
a391 1
## *AuxLedger*
d401 68
d598 1
a598 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.21 2020/06/15 15:56:25 agmsmith Exp agmsmith $
d601 4
@


1.21
log
@Rewording, also combine pending and deleted functionality into the
same thing (granting permission undeletes a record).
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.20 2020/04/10 15:58:33 agmsmith Exp agmsmith $</SMALL>
d157 5
a161 2
* reason string Reason for deletion.  User is implied by the creator of this
  record.  Could mention the IP address of the user too.
d164 1
a164 1
### *LedgerUndelete* < LedgerBase
a170 1
### *LedgerGivePermission* < LedgerBase
d172 1
a172 6
Gives permission for pending links to start working.  The links are specified
by AuxLink records.  Used for things like approving a request to join a group
(the request is a LinkBase record joining the person to the group).  To deny
permission, delete the unapproved link with LedgerDelete.  If you change your
mind, you can undelete the unapproved link.  Functionally equivalent to
LedgerUndelete.
d174 18
a191 1
* reason string  Reason for giving permission.
d286 7
a292 10
* deleted boolean True if this record should be hidden from the users,
  otherwise false (this record is alive).  Could have been deleted by
  LedgerDelete or maybe it was created in a deleted state, which we use for
  pending things that need approval (approved by a moderator functionally
  undeleting it with LedgerGivePermission).  Any rating points gained by the
  child object through this link vanish when it is deleted, as if they never
  were transfered.  However, the rating points spent by the user to make the
  link are not returned to the user (otherwise they could temporarily transfer
  points and someone else could spend more than they are allowed).  Can
  undelete with LedgerUndelete, another good reason for keeping the rating
d294 17
d457 2
a458 1
      t.boolean :pending, default: false, comment: "True if permission is currently denied. The link record exists but it can’t be traversed (sort of like being deleted) until someone gives permission."
d528 1
a528 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.20 2020/04/10 15:58:33 agmsmith Exp agmsmith $
d531 4
@


1.20
log
@Have original_id be NULL on creation, but soon changing to copy of id.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.19 2020/04/10 15:40:04 agmsmith Exp agmsmith $</SMALL>
d17 2
a18 1
pointers in the objects so that an object can have multiple parents.
d33 2
a34 2
deleted, instead a new unlink record is created, referencing the original link
record.
d45 4
a48 4
Because I don't want to have zillions of tables, and want to inherit
functionality for various related record types (generic object > text object >
book review object), we're using the Ruby on Rails ActiveRecord "[single table
inheritance](https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html)"
d68 7
a74 7
There's a design choice needed on making lists of things.  Should you make link
records between a main object and sub-objects that apply to it, or should you
have a second object as kind of a list header, and link the sub-objects to it?
For example, a Friends list.  You could link friends (LedgerUser records) to
the main user (another LedgerUser record) with specialised link_friend records.
Or you could make a LedgerListFriends object with a link to the main user, then
attach the friends to that with generic link records.
d103 4
a106 2
* creator_id Identifies the user who created this record.  Never NULL; the root
  object is considered to have created itself.  Write-once.
d112 5
a116 6
  (unless the user is looking for a specific version the object).  NULL if not
  initialised properly (should be a copy of the id of the record in that case).
  Had considered NULL for marking the original record, but it's easier to find
  all versions of something if the original one is marked the same way, so soon
  after creation the original_id will be updated to be equal to id.  Happens to
  be write-once.
d118 3
a120 1
  not the original record.  Changed as needed.
d157 2
a158 1
* reason string  Reason for deletion.
d174 2
a175 1
mind, you can undelete the unapproved link.
d195 1
a195 1
### *LedgerMicropost* < LedgerBase
d197 11
a207 11
A micropost made by a user.  Contains some formatted text.  They can also
attach pictures and other media files (displayed in a grid, in order by link
creation date).  There can also be micropost replies, the micropost can be
placed in a category list to identify what the topic of the text is, have
rating points awarded to it, and so on.  This is the object the user interacts
with the most.  It is also usually visible to users and even external web
sites, unless permissions make it private.

* scribbles text The text written by the user for the micropost, in markdown
  UTF-8 format (we're using the kramdown dialect).  Length limited only by the
  number of points the user wants to spend (it's an unlimited Text not a String
d214 5
a218 5
video clip.  Can be attached to multiple microposts to make them more
interesting, and referenced by external web sites as well.  Byte size only
limited by the points the user wants to spend to upload it.  All kinds can
display a picture, which can be clicked on to get more detail or play it if it
is a video or audio file.
d272 10
a281 7
* deleted boolean True if there is a LedgerDelete record that deletes this
  record, otherwise false (this record is alive).  Any rating points gained by
  the child object through this link vanish when it is deleted, as if they
  never were transfered.  However, the rating points spent by the user to make
  the link are not returned to the user (otherwise they could temporarily
  transfer points and someone else could spend more than they are allowed).
  Can undelete with LedgerUndelete, another good reason for keeping the rating
a282 11
* pending boolean True if permission is currently denied.  The link record
  exists but it can't be traversed (sort of like being deleted) until someone
  gives permission.  The typical use case will be someone signing up for a
  discussion group by adding themselves as a member of the group (creating a
  LinkGroupMember between the group and their user record).  If the group's
  permissions allow linking, it goes into effect immediately.  If permission
  isn't automatic, then the new link is marked as pending.  Then one of the
  group moderators can approve the pending membership link by changing
  permission settings on the referenced objects or explicitly giving permission
  to this link with a LedgerGivePermission record.  The deleted boolean has
  priority over the pending one.  Changed as needed.
d312 1
a312 1
The child is a reply to the parent.  Usually both objects are LedgerMicropost.
d318 4
a321 4
shown.  Usually the parent is a LedgerMicropost and the child is a LedgerMedia
of some type.  We just treat them all as pictures and show them in a grid after
the text of the micropost (grid order determined by the order of datestamps of
these link records).  The user can click on individual ones to play them.
d343 1
a343 1
* LinkPermissionReply - Target can link a new micropost object to the parent
d499 1
a499 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.19 2020/04/10 15:40:04 agmsmith Exp agmsmith $
d502 3
@


1.19
log
@Update migration comment for original_id.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.18 2020/04/10 15:37:19 agmsmith Exp agmsmith $</SMALL>
d105 10
a114 7
  this is the original one (had considered NULL for the original record, but
  it's easier to find all versions of something if the original one is marked
  the same way).  When someone creates a link to the object, by default it's
  linked to by the original id.  The original record is still used to cache the
  rating points and other dynamic things, though the actual content (text in a
  Post for example) comes from the latest amended record (unless the user is
  looking for a specific version the object).  Happens to be write-once.
d413 1
a413 1
      t.references :original, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeroriginal"}, comment: "Points to the original version of this record, or equal to id if this is the original one."
d501 1
a501 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.18 2020/04/10 15:37:19 agmsmith Exp agmsmith $
d504 3
@


1.18
log
@Change original_id to be equal to id for the original record, not NULL.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.17 2020/03/28 16:19:43 agmsmith Exp agmsmith $</SMALL>
d410 1
a410 1
      t.references :original, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeroriginal"}, comment: "Points to the original version of this record, or NULL if this is the original one."
d498 1
a498 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.17 2020/03/28 16:19:43 agmsmith Exp agmsmith $
d501 3
@


1.17
log
@Split out AuxLink and AuxLedger records, making things simpler again.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.16 2020/03/28 13:18:21 agmsmith Exp agmsmith $</SMALL>
d104 4
a107 2
* original_id Points to the original version of this record, or NULL if this is
  the original one.  When someone creates a link to the object, by default it's
d498 1
a498 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.16 2020/03/28 13:18:21 agmsmith Exp agmsmith $
d501 3
@


1.16
log
@Typos.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.15 2020/03/27 19:03:58 agmsmith Exp agmsmith $</SMALL>
d136 11
a146 11
Used for marking possibly multiple objects as deleted.  LinkDeleteChildObject
and LinkBreakChildLink records are used to associate this LedgerDelete with all
the objects (both LedgerBase object records and LinkBase link records) being
deleted.  Undelete is implemented by creating a LedgerUndelete record for the
same target objects (was too messy trying to delete a LedgerDelete; that is not
supported).  Can have several LedgerDelete and LedgerUndelete records affecting
the same object; only the latest unexpired one decides the target object's
status.  So yes, if enough time passes, the LedgerDelete will fade away and the
targets will no longer be deleted.  Though most often the targets will have
faded away too by that time.  Or we could have a policy of not garbage
collecting LedgerDelete and LedgerUndelete records.
d160 5
a164 5
Gives permission for a pending link to start working.  Used for things like
approving a request to join a group (the request is a LinkBase subclass).  To
deny permission, delete the unapproved link.  If you change your mind, you can
undelete the unapproved link.  Uses LinkPermission records to identify the
approved links.
d256 3
a258 7
* ledger1_id Used by LinkBaseObject subclasses for child pointers to
  LedgerBase objects.  Will only be NULL for LinkBaseLink subclasses.
  Write-once.
* link1_id Used by LinkBaseLink subclasses for child pointers to other LinkBase
  records.  Will only be NULL for LinkBaseObject subclasses.  Unfortunately
  can't be combined with ledger_id though they are mutually exclusive in use,
  since we need to have a different foreign key index on each one.  Write-once.
d271 2
a272 4
  gives permission (by changing permission settings on the referenced objects
  or explicitly giving permission to this link with a LedgerGivePermission
  record).  The typical use case will be someone signing up for a discussion
  group by adding themselves as a member of the group (creating a
d276 4
a279 4
  group moderators can approve the pending membership link by adding a
  LedgerGivePermission record attached to the link or by changing the group's
  overall permissions.  The deleted boolean has priority over the pending one.
  Changed as needed.
d307 1
a307 41
### *LinkBaseObject* < LinkBase

Abstract class where the child is a LedgerBase record.

* child_object_id Points to the LedgerBase object (or subclass) which is the
  other one in the association.  Not NULL, except always NULL in LinkBaseLink
  records.


### *LinkBaseLink* < LinkBase

Abstract class where the child is a LinkBase record.  Mostly used for
LedgerDelete when we remove something from a list by breaking a link.

* child_link_id Points to the LinkBase object (or subclass) which is the other
  one in the association.  Not NULL, except always NULL in LinkBaseObject
  records.


### *LinkDeleteChildObject* < LinkBaseObject

Identifies an object (not link) to be deleted, for use with LedgerDelete and
LedgerUndelete.  Parent is the LedgerDelete record, child is the LedgerBase
record being deleted or undeleted.


### *LinkBreakChildLink* < LinkBaseLink

Identifies a link (not object) to be broken or restored, for use with
LedgerDelete and LedgerUndelete.  Parent is the LedgerDelete record, child is
the LinkBase record being deleted or undeleted.


### *LinkGivePermissionLink* < LinkBaseLink

Identifies a link (not object) to be given permission.  For use with
LedgerGivePermission.  Parent is the LedgerGivePermission record, child is
the LinkBase record being given permission to start working.


### *LinkReply* < LinkBaseObject
d312 1
a312 1
### *LinkMedia* < LinkBaseObject
d321 1
a321 1
### *LinkPermission* < LinkBaseObject
d346 22
d375 9
a383 2
deleted:references ledger1:references
current_down_points:float current_meh_points:float current_up_points:float</PRE>
d385 1
a385 1
Edit the migration file to have default values like this:
d387 10
a396 1
<PRE>class CreateLedgerBases < ActiveRecord::Migration[6.0]
d398 2
a399 2
    create_table :ledger_bases, force: false, comment: "Ledger objects base class and record.  Don't force: cascade deletes since it is a write-once ledger." do |t|
      t.string :type, default: "LedgerBase", comment: "Names the ActiveRecord subclass used to load this row."
a400 1
      t.datetime :date1, default: DateTime.new(1,1,1,0,0,0), comment: "Generic date and time from year 0 to year 9999, defined by subclasses."
d406 2
d409 4
a412 6
      t.references :amended, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgeramended"}, comment: "Points to the latest version of this record, or NULL if this is not the original record."
      t.references :deleted, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledgerdeleted"}, comment: "Points to one of the LedgerDelete records that is currently deleting this record, otherwise NULL (record is alive)."
      t.references :ledger1, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_ledger1"}, comment: "Generic reference to some other LedgerBase record, can be NULL, defined by subclasses."
      t.float :current_down_points, default: 0.0
      t.float :current_meh_points, default: 0.0
      t.float :current_up_points, default: 0.0
a414 10
  end
end</PRE>

In ledger_base.rb:
<PRE>
  has_many :link_downs, class_name: :LinkBase, foreign_key: :parent_id
  has_many :descendants, through: :link_downs, source: :child
  has_many :link_ups, class_name: :LinkBase, foreign_key: :child_id
  has_many :ancestors, through: :link_ups, source: :parent
</PRE>
d416 3
a418 1
Then make the LinkBase object / record:
a419 6
<PRE>rails generate model LinkBase type:string
parent:references child:references creator:references deleted:references
rating_points:float rating_direction:string award_number:integer</PRE>

<PRE>class CreateLinkBases < ActiveRecord::Migration[6.0]
  def change
d421 1
a421 1
      t.string :type, default: "LinkBase", comment: "Names the ActiveRecord subclass used to load this row."
d423 1
a423 1
      t.references :child, null: false, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkchild"}, comment: "Points to the LedgerBase object (or subclass) which is the other one in the association."
d425 2
a426 1
      t.references :deleted, null: true, foreign_key: {to_table: :ledger_bases, name: "fk_rails_linkdeleted"}, comment: "Points to one of the LedgerUnlink or LedgerDelete records that deleted this record, otherwise NULL (this record is alive)."
d428 2
a429 1
      t.float :rating_points_boost, default: 0.0, comment: "The number of points used to boost the rating of the child object."
d434 10
d445 5
a449 1
end</PRE>
a450 1
In link_base.rb add:
d452 1
d455 2
a458 10
Then add the LinkBase reference field in the LedgerBase record:

<PRE>rails generate migration AddLink1ToLedgerBase link1:references:index</PRE>

<PRE>class AddLink1ToLedgerBase < ActiveRecord::Migration[6.0]
  def change
    add_reference :ledger_bases, :link1, null: true, foreign_key: {to_table: :link_bases, name: "fk_rails_ledgerlink1"}, comment: "Points to a generic LinkBase object (or subclass)."
  end
end</PRE>

d462 11
d496 1
a496 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.15 2020/03/27 19:03:58 agmsmith Exp agmsmith $
d499 3
@


1.15
log
@Minor typos fixed.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.14 2020/03/26 20:25:45 agmsmith Exp agmsmith $</SMALL>
d256 4
a259 3
* ledger_id Used by LinkBaseObject subclasses for child pointers to LedgerBase
  objects.  Will only be NULL for LinkBaseLink subclasses.  Write-once.
* link_id Used by LinkBaseLink subclasses for child pointers to other LinkBase
d500 1
a500 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.14 2020/03/26 20:25:45 agmsmith Exp agmsmith $
d503 3
@


1.14
log
@Rethought deleting and permissions.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.13 2020/02/20 21:45:08 agmsmith Exp agmsmith $</SMALL>
d25 4
a28 4
references (links) to the text will still point at the original text record,
since that has a more constant identity then possibly yet more new text
records.  Of course, advanced users can view a list of all those text records
and see the change history.
d84 1
a84 1
defined lists which will use the list header with a name technique.  And plain
d163 2
a164 1
undelete the unapproved link.
d196 2
a197 1
  number of points the user wants to spend (it's a Text not a String field).
d252 1
a252 1
  and the related LinkBreakChildLink records.  Write-once.
d499 1
a499 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.13 2020/02/20 21:45:08 agmsmith Exp agmsmith $
d502 3
@


1.13
log
@Fix typos after proofreading.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.12 2020/02/07 15:28:32 agmsmith Exp agmsmith $</SMALL>
d7 1
a7 1
Because I'm thinking someone could implement the reputation system as a
d10 1
a10 1
records and link records.  Objects are the things the user can view and they
d14 3
a16 3
object now in that container (such as a book review object).  Usually rating
points are also transfered when you create a link (perhaps describing how much
you like that book review).  I'm using separate links rather than parent
d49 2
a50 2
links, both have a "type" field in each row to specify the particular subclass
used for that row.
d78 9
a86 9
subclasses.  The list header method just needs to give the list header a name
and uses generic records, but requires more database operations.  There's also
a third option of putting the link reference in the record as an id field, like
friend_id, but that only works if you have one friend (useful in other cases,
like having only one creator).  We'll go with the faster but more work custom
link subclasses method, except for user defined lists which will use the list
header with a name technique.  And plain references where that makes sense.  If
the number of subclasses gets too big, this decision will have to be
reconsidered.
d99 3
a101 2
* type string The name of the subclass to use for this object record.
  Write-once.
d112 5
a116 5
* deleted_id Points to one of the LedgerDelete records that is currently
  deleting this record, otherwise NULL (record is alive).  Deleted records just
  show a warning message to the user when an attempt is made to display this
  object.  Rating points are accumulated as usual.  That way we can undelete
  this record if needed.  Changed as needed.
d130 3
a132 1
  record can be deleted from the current database, freeing up storage.
d136 28
a163 16
Used for marking possibly multiple objects as deleted or killed.  LinkDelChild
records are used to associate this LedgerDelete with all the objects being
deleted.  Undelete is implemented by creating a new LedgerDelete record to kill
the original LedgerDelete record, repeat as needed to redelete and so on.  We
don't support, or even want to think about having a LedgerDelete delete itself.
Can have several LedgerDelete records deleting the same object; need to kill
all those LedgerDelete records to undelete that object.

* unlink_too boolean True if the links to the object (those where LinkBase
  child_id points to the deleted object) are deleted too (removing it from all
  lists), false if just the object is deleted.  This flag is ignored when
  deleting a LedgerDelete record - all associated links and objects are updated
  recursively.


### *LedgerUnlink* < LedgerBase
d165 1
a165 4
Breaks a link, used for removing an object from a list.  You can undo an unlink
by deleting this LedgerUnlink object.

* link_id Which LinkBase object to mark as deleted.
d185 11
a195 9
A micropost made by a user.  Contains some text in UTF-8 markdown format.  They
can also attach pictures and other media files.  There can also be micropost
replies, the micropost can be placed in a category list to identify what the
topic of the text is, have rating points awarded to it, and so on.  This is the
object the user interacts with the most.  It is also usually visible to users
and even external web sites, unless permissions make it private.

* content Text for the micropost.  Length limited only by the number of points
  the user wants to spend.
d201 9
a209 7
video clip.  Can be attached to microposts to make them more interesting, and
referenced by external web sites as well.  Byte size only limited by the points
the user wants to spend to upload it.  All kinds can display a picture, which
can be clicked on to get more detail or play it if it is a video or audio file.

* Implicit ActiveStorage link stores the file.  Have functions for getting the
  file size, data type, URL, etc.
d217 4
a220 4
the earth's rotation.  If you delete this record, the ceremony is ignored and
just about everything needs to be recalculated, including award numbers for
subsequent ceremonies and LinkBase records.  Currently deleting this kind of
record is not implemented, so don't do it.
a240 21
### *LedgerPermissions* < LedgerBase

Specifies the permissions needed to access the LedgerObject this record is
linked to via LinkPermission.  There is a list or even a subtree linked to this
record specifying a bunch of users in some way (friends of friends etc), as
specifed by the link record type.  Often this will be a discussion group list.
There can be several LedgerPermissions records attached to the same object,
they are applied in chronological order of link created dates until a decision
is made.  A LedgerPermissions record can be shared between several objects too,
such as a default permission for a discussion group applying to all microposts
and replies in the group.

* present_permission char Has "N" to prohibit the listed users from accessing
  the object, "R" to allow only read access, "L" to allow link creation access
  too (adding a micropost to your own list), "W" to allow write access too
  (writing replies, effectively adding a link to the micropost), "A" to add
  amending and deleting access, "I" to inherit permissions from a later
  permission record ("I" could also be thought to mean ignore).
* absent_permission char Same letter codes, but apply to users NOT listed.


d244 1
a244 1
database table for all objects of this class and subclasses.  The particular
d249 3
a251 2
  can refer to the link record,  only explicitly used by LedgerUnlink.
* type string The name of the subclass to use for this object record.
d253 30
a282 13
  main one in the association.  Never NULL.
* child_id Points to the LedgerBase object (or subclass) which is the other one
  in the association.  Never NULL.
* creator_id Identifies the User who created this link.  Never NULL.
* deleted_id Points to one of the LedgerUnlink or LedgerDelete records that
  deleted this record, otherwise NULL (this record is alive).  If this record
  is deleted, the link it made is considered to not exist any more.  Any rating
  points gained by that object through the link vanish, as if they never were
  transfered.  However, the rating points spent by the user to make the link
  are not returned to the user (otherwise they could temporarily transfer
  points and someone else could spend more than they are allowed).  Can
  undelete by deleting the LedgerUnlink or LedgerDelete, another good reason
  for keeping the rating points spent.
d284 16
a299 10
  the creator, including transaction fees (larger fees for storing more bytes
  and a base fee to avoid high speed trading problems).
* rating_points_boost float The number of points used to boost the rating of
  the child object, equals spent minus fees.  Over time they are considered to
  fade (the value in the database doesn't change, we just calculate the current
  faded value when needed), and when enough time has gone by, you can remove
  this link completely from the database.  If the child object no longer has
  any points, it can be deleted too, and so on.  We'll probably do that as part
  of the weekly point updates - if the total is near zero (under 0.01, about 3
  years of fading for one point), the link or object can be deleted.
d301 10
a310 6
  child object, can be "U" for up, "D" for down or "M" for meh.
* award_number The week's award number when this record was created, 0 if
  before any ceremonies have been done.  Lets us easily calculate the current
  faded value of the rating points.  This field can be recalculated by looking
  at this record's created_at date and cross referencing with all the undeleted
  LedgerAwardCeremony records.
d312 1
d314 3
a316 1
### *LinkDelChild* < LinkBase
a317 4
Identifies an object to be deleted, for use with LedgerDelete.  Parent is the
LedgerDelete record, child is one of the objects being deleted.  If this
LinkDelChild object is deleted, then the LedgerDelete operation is modified to
not include the child.
d319 1
d321 30
a350 1
### *LinkReply* < LinkBase
d355 1
a355 1
### *LinkMedia* < LinkBase
d360 2
a361 1
the text of the micropost.  The user can click on individual ones to play them.
d364 1
a364 1
### *LinkPermission* < LinkBase
d366 21
a386 4
The parent is some LedgerObject, the child is a LedgerPermissions record that
applies to the parent.  If there are several LinkPermission records for the
same parent object, they are run through in increasing date of link creation
until a permission decision is made.
d497 1
a497 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.12 2020/02/07 15:28:32 agmsmith Exp agmsmith $
d500 3
@


1.12
log
@Mention initialising the root object in the database.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.11 2020/02/04 22:20:21 agmsmith Exp agmsmith $</SMALL>
d16 2
a17 1
you like that book review).
d84 3
a86 1
header with a name technique.  And plain references where that makes sense.
d102 1
a102 1
  user is considered to have created themself.  Write-once.
d106 1
a106 1
  rating points and other dyanmic things, though the actual content (text in a
d121 9
a129 9
  ceremony) plus new ratings applied this week.  We keep the directions seprate
  to improve statistical estimation of how accurate the rating is (just storing
  the net difference of 2 points isn't as meaningful as knowing you had 102 up
  and 100 down vs 3 up and 1 down), and use them as inputs to various different
  sorting algorithms.  Until someone redoes the statistical theory, we'll split
  meh points 50% to each of up and down.  But once we have better math, we can
  use meh directly.  When they have all faded away to close to zero (less than
  0.01, equivalent to 3 years of fading one point) then the record can be
  deleted from the current database, freeing up storage.
d212 2
a213 1
  time is in the usual created_at time stamp for this record.
d427 1
a427 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.11 2020/02/04 22:20:21 agmsmith Exp agmsmith $
d430 3
@


1.11
log
@Proof reading pass done.  Also added list design choices.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.10 2020/02/03 22:33:40 agmsmith Exp agmsmith $</SMALL>
d397 3
d423 1
a423 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.10 2020/02/03 22:33:40 agmsmith Exp agmsmith $
d426 3
@


1.10
log
@Fix up formatting in kramdown for preformatted code.
@
text
@d3 3
a5 1
<SMALL>$Id: Database\040Design.md,v 1.9 2020/02/03 22:26:20 agmsmith Exp agmsmith $</SMALL>
d18 2
d21 1
a21 1
later object (they all have datestamps) with the new text and a reference back
d31 2
a32 2
deleted, instead a new link kill record is created, referencing the same two
objects.
d41 2
d51 2
d64 21
d105 1
a105 1
  looking for a specific version the object).
d107 1
a107 1
  not the original record.
d110 15
a124 15
  show a message to the user when an attempt is made to display this object.
  Rating points are accumulated as usual.  That way we can undelete this record
  if needed.
* current_down_points float
* current_meh_points float
* current_up_points float Number of rating points in each of the directions for
  this object.  This is the current total, including fading over time
  (recalculated at the beginning of the week in the awards ceremony) plus new
  ratings applied this week.  We keep the directions seprate to improve
  statistical estimation of how accurate the rating is (just storing the net
  difference of 2 points isn't as meaningful as knowing you had 102 up and 100
  down vs 3 up and 1 down), and use them as inputs to various different sorting
  algorithms.  Until someone redoes the statistical theory, we'll split meh
  points 50% to each of up and down.  But once we have better math, we can use
  meh directly.  When they have all faded away to close to zero (less than
a127 1

d205 1
a205 1
  rating points were used at the beginning of time, before any awards, the
d207 1
a207 1
  points * (fade ** AwardNumber).
d237 2
a238 2
  amending and deleting access, "I" to inherit permissions from some other
  permission record.
d263 3
a265 1
  points and someone else could spend more than they are allowed).
d289 3
a291 2
LedgerDelete record, child is the object being deleted.  If this link object is
deleted, then the LedgerDelete operation is modified to not include child.
d320 2
a321 2
bool1:boolean date1:datetime number1:integer string1:string text1:text
creator:references original:references amended:references
d334 2
a335 1
      t.string :string1, default: "", comment: "Generic string (up to 255 characters), defined by subclasses."
d420 1
a420 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.9 2020/02/03 22:26:20 agmsmith Exp agmsmith $
d423 3
@


1.9
log
@Added command lines needed to generate the database.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.8 2020/02/02 22:15:24 agmsmith Exp agmsmith $</SMALL>
d296 1
a296 1
class CreateLedgerBases < ActiveRecord::Migration[6.0]
d316 1
a316 1
end
d319 1
d324 1
d326 1
d332 1
a332 1
class CreateLinkBases < ActiveRecord::Migration[6.0]
d347 1
a347 1
end
d350 1
d353 1
a353 1

d359 1
a359 1
class AddLink1ToLedgerBase < ActiveRecord::Migration[6.0]
d363 1
a363 1
end
d388 1
a388 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.8 2020/02/02 22:15:24 agmsmith Exp agmsmith $
d391 3
@


1.8
log
@Added permissions records.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.7 2020/02/02 21:44:52 agmsmith Exp agmsmith $</SMALL>
d57 2
a58 1
## LedgerBase
d68 1
a70 5
* permissions_id Points to the most recent permissions record for this object.
  NULL if everybody is allowed to read it.  Often this will point to a user's
  settings list which contains the default permissions.  For discussion groups,
  it will point to the permission in the group's settings.  Updated when a new
  permissions record is linked to this object.
d100 9
a108 9
**LedgerDelete** < LedgerBase
: Used for marking possibly multiple objects as deleted or killed.
  LinkDelChild records are used to associate this LedgerDelete with all the
  objects being deleted.  Undelete is implemented by creating a new
  LedgerDelete record to kill the original LedgerDelete record, repeat as
  needed to redelete and so on.  We don't support, or even want to think about
  having a LedgerDelete delete itself.  Can have several LedgerDelete records
  deleting the same object; need to kill all those LedgerDelete records to
  undelete that object.
d117 4
a120 3
**LedgerUnlink** < LedgerBase
: Breaks a link, used for removing an object from a list.  You can undo an
  unlink by deleting this LedgerUnlink object.
d125 3
a127 2
**LedgerUser** < LedgerBase
: Idenfities a particular user.
d140 8
a147 8
**LedgerMicropost** < LedgerBase
: A micropost made by a user.  Contains some text in UTF-8 markdown format.
  They can also attach pictures and other media files.  There can also be
  micropost replies, the micropost can be placed in a category list to identify
  what the topic of the text is, have rating points awarded to it, and so on.
  This is the object the user interacts with the most.  It is also usually
  visible to users and even external web sites, unless permissions make it
  private.
d153 7
a159 7
**LedgerMedia** < LedgerBase
: A file uploaded by the user.  Usually some sort of media, like a picture or
  video clip.  Can be attached to microposts to make them more interesting, and
  referenced by external web sites as well.  Byte size only limited by the
  points the user wants to spend to upload it.  All kinds can display a
  picture, which can be clicked on to get more detail or play it if it is a
  video or audio file.
d165 9
a173 8
**LedgerAwardCeremony** < LedgerBase
: This record marks the time when (usually weekly) rating points are awarded.
  We perform the ceremony relative to planetary time, so the actual time
  between ceremonies won't always be exactly 7 days and 0 seconds, due to the
  slowdown of the earth's rotation.  If you delete this record, the ceremony is
  ignored and just about everything needs to be recalculated, including award
  numbers for subsequent ceremonies and LinkBase records.  Currently deleting
  this kind of record is not implemented, so don't do it.
d184 4
a187 3
**LedgerBirthday** < LedgerBase
: Identifies the birthday of a user.  Mostly an excuse to reuse the generic
  timestamp field that LedgerAwardCeremony made necessary.
d193 11
a203 10
**LedgerPermissions** < LedgerBase
: Specifies the permissions needed to access the LedgerObject this record is
  linked to via LinkPermission.  There is a list or even a subtree linked to
  this record specifying a bunch of users in some way (friends of friends etc),
  as specifed by the link record type.  Often this will be a discussion group
  list.  There can be several LedgerPermissions records attached to the same
  object, they are applied in chronological order of link created dates until a
  decision is made.  A LedgerPermissions record can be shared between several
  objects too, such as a default permission for a discussion group applying to
  all microposts and replies in the group.
d214 2
a215 1
## LinkBase
d219 1
a219 4
A is a list header and B is in the list, etc).  Theoretically we don't need
subclasses and could determine the use by examining the object types, but
subclasses and having a type name field in the record is more convenient for
database debugging and sanity checks.
d236 11
a246 8
* rating_points float The number of points spent on making this link by the
  creator.  Over time they are considered to fade (the value in the database
  doesn't change, we just calculate the current faded value when needed), and
  when enough time has gone by, you can remove this link completely from the
  database.  If the child object no longer has any points, it can be deleted
  too, and so on.  We'll probably do that as part of the weekly point updates -
  if the total is near zero (under 0.01, about 3 years of fading for one
  point), the link or object can be deleted.
d256 1
a256 8
**LinkDelChild** < LinkBase
: Identifies an object to be deleted, for use with LedgerDelete.  Parent is the
  LedgerDelete record, child is the object being deleted.  If this link object
  is deleted, then the LedgerDelete operation is modified to not include child.


**LinkReply** < LinkBase
: The child is a reply to the parent.  Usually both objects are LedgerMicropost.
d258 102
a359 14

**LinkMedia** < LinkBase
: The child is some sort of media which should be displayed when the parent is
  shown.  Usually the parent is a LedgerMicropost and the child is a
  LedgerMedia of some type.  We just treat them all as pictures and show them
  in a grid after the text of the micropost.  The user can click on individual
  ones to play them.


**LinkPermission** < LinkBase
: The parent is some LedgerObject, the child is a LedgerPermissions record that
  applies to the parent.  If there are several LinkPermission records for the
  same parent object, they are run through in increasing date of link creation
  until a permission decision is made.
d384 1
a384 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.7 2020/02/02 21:44:52 agmsmith Exp agmsmith $
d387 3
@


1.7
log
@After some experiments, decided to use floating point rating points.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.6 2020/01/31 21:54:25 agmsmith Exp agmsmith $</SMALL>
d102 1
d119 1
d126 1
d140 1
d153 1
d165 1
d183 1
d192 20
d252 1
d258 1
d262 1
d271 7
d300 1
a300 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.6 2020/01/31 21:54:25 agmsmith Exp agmsmith $
d303 3
@


1.6
log
@Work in progress adding fields and descriptions, worrying about deleting.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.5 2020/01/30 22:16:28 agmsmith Exp agmsmith $</SMALL>
d67 1
a67 1
* creator_id Identifies the user who created this record.  Not NULL; the root
d71 3
a73 3
  settings list which contains the default permissions.  For
  discussion groups, it will point to the permission in the group's settings.
  Updated when a new permissions record is linked to this object.
d87 14
d112 5
a116 5
* killed_too boolean TRUE if the object is killed, false if it is merely
  deleted.  The difference is that all links to a killed object are marked
  deleted too, so the object will no longer be in lists.  The kill flag is
  ignored when deleting a LedgerDelete record - all associated LinkDelete
  records and objects are updated recursively.
d124 60
d195 1
a195 1
  can refer to the link record, really only used when deleting links.
d201 4
a204 3
* deleted_id Points to the LedgerUnlink or LedgerDelete record that deleted
  this record, otherwise NULL (this record is alive).  If this record is
  deleted, the link it made is considered to not exist any more.  Any rating
d209 15
d226 1
a226 1
: Marks an object as deleted, for use with LedgerDelete.  Parent is the
d230 9
a238 3
**LinkDelete** < LinkBase
: Marks a link as deleted.  Parent and child are the same as the object being
  deleted.  If this link object is deleted, then the child is undeleted.
d253 2
a254 1
categories. Second user navigates tree to see messages about their favourite topic.
d263 1
a263 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.5 2020/01/30 22:16:28 agmsmith Exp agmsmith $
d266 3
@


1.5
log
@Starting to add fields to the base object record.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.4 2020/01/30 15:45:39 agmsmith Exp agmsmith $</SMALL>
d53 2
a54 1
using the actual database field names whenever we use the subclass object.
d56 4
a59 2
LedgerBase
: The base class for persistent objects that the user may interact with.
d66 1
d71 1
a71 1
  settings list which contains the default permissions, and other things.  For
d82 62
d166 1
a166 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.4 2020/01/30 15:45:39 agmsmith Exp agmsmith $
d169 3
@


1.4
log
@Explain the ledger write-once system and single table inheritance.
@
text
@d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.3 2020/01/30 14:40:09 agmsmith Exp agmsmith $</SMALL>
d52 2
a53 1
:email_address, :string2".
d56 1
a56 1
: The base class for persistent objects.
d58 40
a97 1
* First field name.
d100 1
a100 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.3 2020/01/30 14:40:09 agmsmith Exp agmsmith $
d103 3
@


1.3
log
@Writing continues, work in progress.
@
text
@d1 1
a1 1
# The Rating Stone Database
d3 1
a3 1
<SMALL>$Id: Database\040Design.md,v 1.2 2020/01/29 22:52:13 agmsmith Exp agmsmith $</SMALL>
d5 10
a14 3
Because I'm thinking someone could implement the system as a BlockChain ledger
application, or as a federated collection of systems exchanging records, the
database is set up as a mostly read-only collection of objects and linkages.
d18 18
a35 7
to the original text object.  Then when displaying the original text, it will
search for newer versions and display that text.  Of course, advanced users can
view a list of available versions of the text and see the change history.

Similarly when someone adds an item to a list, a link record will be added between the item object's id number and the list object's id number.  To remove an item, the link record isn't deleted, instead a new link kill record is created, with the same id number pair.

Theoretically, when displaying the current state of things, you run through all the records, adding and removing objects and links from the current state.  In practice, we cache things. So an object record would have a flag that marks it as deleted or amended, and a link record would similarly be marked.  Since people might want to reference a deleted thing, we don't actually delete them.
d38 2
a39 2
functionality for various related record types, we're using the Ruby on Rails
ActiveRecord "[single table
d41 12
a52 2
setup.  There will be one table, with a "type" field in each row to specify the
particular subclass used for that row.
d60 1
a60 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.2 2020/01/29 22:52:13 agmsmith Exp agmsmith $
d63 3
@


1.2
log
@Fixed up formatting of RCS log and version number.
@
text
@d3 1
a3 1
<SMALL>$Id: 1.1 $</SMALL>
d15 4
d32 1
a32 1
$Header: /home/agmsmith/Programming/Rating\040Stone/docs/RCS/Database\040Design.md,v 1.1 2020/01/29 22:43:07 agmsmith Exp agmsmith $
d35 2
@


1.1
log
@Initial revision
@
text
@d3 2
a4 1
$Revision$
d6 1
a6 1
application,  or as a federated collection of systems exchanging records, the
d9 12
a20 4
For example, if you want to edit some posted text, the system will create a later object (they all have datestamps) with the new text and a reference back to the original text object. Then when displaying the original text, it will search for newer versions and display that text.  Of course, advanced users can view a list of available versions of the text and see the change history.

Because I don't want to have zillions of tables, and want to inherit functionality for
various related record types, we're using the Ruby on Rails ActiveRecord "[single table inheritance](https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html)" setup.   There will be one table, with a "type" field in each row to specify the particular subclass used for that row.
d27 4
a30 2
$Header$
$Log$
d32 3
@
